{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# AI E-commerce Customer Support Agent\n\n## Overview\n\nThis is an AI-powered e-commerce customer support agent built with a hybrid architecture combining a layered Retrieval-Augmented Generation (RAG) system with Gemini API 2.0 Flash. The application provides intelligent customer support through an optimized flow: FAQ browsing → Knowledge Base matching → AI-powered fallback responses. The system features a React frontend with shadcn/ui components and an Express backend with PostgreSQL database integration.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript and Vite for development/build tooling\n- **UI Components**: Comprehensive shadcn/ui component library with Radix UI primitives\n- **Styling**: Tailwind CSS with CSS custom properties for theming\n- **State Management**: TanStack Query for server state, React hooks for local state\n- **Routing**: Wouter for lightweight client-side routing\n\n### Backend Architecture\n- **Runtime**: Node.js with Express framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful endpoints with structured error handling and request logging\n- **Rate Limiting**: Built-in session-based rate limiting (25 queries per 24 hours)\n- **Development**: Hot reload with Vite middleware integration\n\n### Data Storage Solutions\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Schema Design**: \n  - Users table for authentication\n  - Chat sessions for tracking user interactions\n  - FAQ entries with embeddings for knowledge base\n  - Chat messages for conversation history\n- **Connection**: Neon Database serverless PostgreSQL\n\n### RAG System Implementation\n- **Knowledge Base**: 50+ pre-loaded FAQ entries across 10 e-commerce categories (Orders, Payments, Returns, etc.)\n- **Similarity Matching**: Text-based similarity using Jaccard similarity and phrase matching\n- **Embedding Storage**: JSONB field for future vector embedding integration\n- **Fallback Logic**: Three-tier response system (Instant FAQ → KB Search → Gemini AI)\n\n### AI Integration\n- **Primary LLM**: Google Gemini API 2.0 Flash for contextual response generation\n- **Usage Optimization**: Minimal token usage through KB pre-filtering and concise prompts\n- **Context Augmentation**: Top-3 relevant KB entries provided as context to Gemini\n- **Response Constraints**: 50-100 word limit with professional e-commerce tone\n\n### Session Management\n- **Session Tracking**: UUID-based session identification\n- **Usage Monitoring**: Query count tracking with time-based reset windows\n- **Memory Fallback**: In-memory storage implementation for development/testing\n\n## External Dependencies\n\n- **Database Service**: Neon Database (PostgreSQL serverless)\n- **AI Service**: Google Gemini API 2.0 Flash\n- **UI Framework**: Radix UI component primitives\n- **Development Platform**: Replit with specialized plugins and error handling\n- **Styling System**: Tailwind CSS with PostCSS processing\n- **State Management**: TanStack Query for server state caching\n- **Build Tools**: Vite for development server and production builds\n- **Type Safety**: TypeScript with Drizzle for database type generation","size_bytes":3259},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { ragService } from \"./services/rag\";\nimport { generateCustomerSupportResponse } from \"./services/gemini\";\nimport { knowledgeBaseService } from \"./services/knowledgeBase\";\nimport { chatQuerySchema, faqSelectSchema, type ChatResponse } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const RATE_LIMIT = 25;\n  const RATE_LIMIT_WINDOW = 24 * 60 * 60 * 1000; // 24 hours\n\n  // Middleware to check rate limits\n  async function checkRateLimit(sessionId: string): Promise<{ allowed: boolean; remaining: number }> {\n    let session = await storage.getChatSession(sessionId);\n    \n    if (!session) {\n      session = await storage.createChatSession({ sessionId });\n    }\n    \n    // Reset count if 24 hours have passed\n    const now = new Date();\n    const timeDiff = now.getTime() - (session.lastActivity?.getTime() || 0);\n    \n    if (timeDiff > RATE_LIMIT_WINDOW) {\n      session = await storage.updateChatSession(sessionId, { queryCount: 0 }) || session;\n    }\n    \n    const remaining = Math.max(0, RATE_LIMIT - (session.queryCount || 0));\n    const allowed = (session.queryCount || 0) < RATE_LIMIT;\n    \n    return { allowed, remaining };\n  }\n\n  // Get FAQ categories\n  app.get(\"/api/faq/categories\", async (req, res) => {\n    try {\n      const categories = await knowledgeBaseService.getAllCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch FAQ categories\" });\n    }\n  });\n\n  // Get questions for a specific category\n  app.get(\"/api/faq/category/:categoryName\", async (req, res) => {\n    try {\n      const { categoryName } = req.params;\n      const questions = await knowledgeBaseService.getCategoryQuestions(categoryName);\n      res.json(questions);\n    } catch (error) {\n      console.error(\"Error fetching category questions:\", error);\n      res.status(500).json({ message: \"Failed to fetch category questions\" });\n    }\n  });\n\n  // Select a specific FAQ\n  app.post(\"/api/faq/select\", async (req, res) => {\n    try {\n      const { questionId } = faqSelectSchema.parse(req.body);\n      \n      const faq = await knowledgeBaseService.getFaqById(questionId);\n      if (!faq) {\n        return res.status(404).json({ message: \"FAQ not found\" });\n      }\n\n      // Update usage count\n      await storage.updateFaqEntryUsage(questionId);\n      \n      const response: ChatResponse = {\n        response: faq.answer,\n        source: 'kb',\n        responseTime: 50, // Instant response\n        kbEntryId: questionId,\n        rateLimitRemaining: RATE_LIMIT // FAQ selections don't count against rate limit\n      };\n\n      res.json(response);\n    } catch (error) {\n      console.error(\"Error selecting FAQ:\", error);\n      res.status(500).json({ message: \"Failed to process FAQ selection\" });\n    }\n  });\n\n  // Chat query endpoint - main RAG + Gemini pipeline\n  app.post(\"/api/chat/query\", async (req, res) => {\n    try {\n      const { message, sessionId } = chatQuerySchema.parse(req.body);\n      const startTime = Date.now();\n\n      // Check rate limit\n      const { allowed, remaining } = await checkRateLimit(sessionId);\n      \n      if (!allowed) {\n        const response: ChatResponse = {\n          response: \"Daily free usage limit reached. Please try again tomorrow or contact customer care for immediate assistance.\",\n          source: 'system',\n          responseTime: Date.now() - startTime,\n          rateLimitRemaining: 0\n        };\n        return res.json(response);\n      }\n\n      // Update query count\n      const session = await storage.getChatSession(sessionId);\n      if (session) {\n        await storage.updateChatSession(sessionId, { \n          queryCount: (session.queryCount || 0) + 1 \n        });\n      }\n\n      // Step 1: Search knowledge base using RAG\n      const allEntries = await storage.getAllFaqEntries();\n      const bestMatch = await ragService.getBestMatch(message, allEntries);\n      \n      let response: ChatResponse;\n\n      if (bestMatch && bestMatch.score >= 0.6) {\n        // High confidence KB match - return directly\n        await storage.updateFaqEntryUsage(bestMatch.entry.id);\n        \n        response = {\n          response: bestMatch.entry.answer,\n          source: 'kb',\n          responseTime: Date.now() - startTime,\n          similarityScore: bestMatch.score,\n          kbEntryId: bestMatch.entry.id,\n          rateLimitRemaining: remaining - 1\n        };\n      } else {\n        // Low confidence or no match - use Gemini with KB context\n        const topMatches = await ragService.getTopMatches(message, allEntries, 3);\n        const kbContext = topMatches.map(match => ({\n          question: match.entry.question,\n          answer: match.entry.answer\n        }));\n        \n        const geminiResponse = await generateCustomerSupportResponse(message, kbContext, sessionId);\n        \n        response = {\n          response: geminiResponse.response,\n          source: 'gemini',\n          responseTime: geminiResponse.responseTime,\n          similarityScore: bestMatch?.score,\n          rateLimitRemaining: remaining - 1\n        };\n      }\n\n      // Log the conversation\n      await storage.createChatMessage({\n        sessionId,\n        message,\n        response: response.response,\n        source: response.source,\n        responseTime: response.responseTime\n      });\n\n      res.json(response);\n    } catch (error) {\n      console.error(\"Error processing chat query:\", error);\n      res.status(500).json({ message: \"Failed to process your query. Please try again.\" });\n    }\n  });\n\n  // Get knowledge base statistics\n  app.get(\"/api/kb/stats\", async (req, res) => {\n    try {\n      const stats = await knowledgeBaseService.getKnowledgeBaseStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching KB stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch knowledge base statistics\" });\n    }\n  });\n\n  // Get chat history for a session\n  app.get(\"/api/chat/history/:sessionId\", async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      const messages = await storage.getChatMessagesBySession(sessionId);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching chat history:\", error);\n      res.status(500).json({ message: \"Failed to fetch chat history\" });\n    }\n  });\n\n  // Check session rate limit status\n  app.get(\"/api/session/:sessionId/status\", async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      const { allowed, remaining } = await checkRateLimit(sessionId);\n      res.json({ allowed, remaining, limit: RATE_LIMIT });\n    } catch (error) {\n      console.error(\"Error checking session status:\", error);\n      res.status(500).json({ message: \"Failed to check session status\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":7070},"server/storage.ts":{"content":"import { type User, type InsertUser, type ChatSession, type InsertChatSession, type FaqEntry, type InsertFaqEntry, type ChatMessage, type InsertChatMessage } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { faqData } from \"./data/faqData\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Chat sessions\n  getChatSession(sessionId: string): Promise<ChatSession | undefined>;\n  createChatSession(session: InsertChatSession): Promise<ChatSession>;\n  updateChatSession(sessionId: string, updates: Partial<ChatSession>): Promise<ChatSession | undefined>;\n  \n  // FAQ entries\n  getAllFaqEntries(): Promise<FaqEntry[]>;\n  getFaqEntriesByCategory(category: string): Promise<FaqEntry[]>;\n  getFaqEntryById(id: string): Promise<FaqEntry | undefined>;\n  createFaqEntry(entry: InsertFaqEntry): Promise<FaqEntry>;\n  updateFaqEntryUsage(id: string): Promise<void>;\n  \n  // Chat messages\n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  getChatMessagesBySession(sessionId: string): Promise<ChatMessage[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private chatSessions: Map<string, ChatSession>;\n  private faqEntries: Map<string, FaqEntry>;\n  private chatMessages: Map<string, ChatMessage>;\n\n  constructor() {\n    this.users = new Map();\n    this.chatSessions = new Map();\n    this.faqEntries = new Map();\n    this.chatMessages = new Map();\n    this.initializeFaqData();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getChatSession(sessionId: string): Promise<ChatSession | undefined> {\n    return Array.from(this.chatSessions.values()).find(\n      (session) => session.sessionId === sessionId\n    );\n  }\n\n  async createChatSession(insertSession: InsertChatSession): Promise<ChatSession> {\n    const id = randomUUID();\n    const session: ChatSession = {\n      id,\n      sessionId: insertSession.sessionId,\n      queryCount: 0,\n      createdAt: new Date(),\n      lastActivity: new Date(),\n    };\n    this.chatSessions.set(id, session);\n    return session;\n  }\n\n  async updateChatSession(sessionId: string, updates: Partial<ChatSession>): Promise<ChatSession | undefined> {\n    const session = await this.getChatSession(sessionId);\n    if (session) {\n      const updatedSession = { ...session, ...updates, lastActivity: new Date() };\n      this.chatSessions.set(session.id, updatedSession);\n      return updatedSession;\n    }\n    return undefined;\n  }\n\n  async getAllFaqEntries(): Promise<FaqEntry[]> {\n    return Array.from(this.faqEntries.values());\n  }\n\n  async getFaqEntriesByCategory(category: string): Promise<FaqEntry[]> {\n    return Array.from(this.faqEntries.values()).filter(\n      (entry) => entry.category === category\n    );\n  }\n\n  async getFaqEntryById(id: string): Promise<FaqEntry | undefined> {\n    return this.faqEntries.get(id);\n  }\n\n  async createFaqEntry(insertEntry: InsertFaqEntry): Promise<FaqEntry> {\n    const id = randomUUID();\n    const entry: FaqEntry = {\n      id,\n      question: insertEntry.question,\n      answer: insertEntry.answer,\n      category: insertEntry.category,\n      keywords: insertEntry.keywords || [],\n      usageCount: 0,\n      embedding: null,\n    };\n    this.faqEntries.set(id, entry);\n    return entry;\n  }\n\n  async updateFaqEntryUsage(id: string): Promise<void> {\n    const entry = this.faqEntries.get(id);\n    if (entry) {\n      entry.usageCount = (entry.usageCount || 0) + 1;\n      this.faqEntries.set(id, entry);\n    }\n  }\n\n  async createChatMessage(insertMessage: InsertChatMessage): Promise<ChatMessage> {\n    const id = randomUUID();\n    const message: ChatMessage = {\n      id,\n      sessionId: insertMessage.sessionId,\n      message: insertMessage.message,\n      response: insertMessage.response,\n      source: insertMessage.source,\n      responseTime: insertMessage.responseTime || 0,\n      timestamp: new Date(),\n    };\n    this.chatMessages.set(id, message);\n    return message;\n  }\n\n  async getChatMessagesBySession(sessionId: string): Promise<ChatMessage[]> {\n    return Array.from(this.chatMessages.values()).filter(\n      (message) => message.sessionId === sessionId\n    );\n  }\n\n  private initializeFaqData(): void {\n    // Initialize with comprehensive 1000+ FAQ entries\n    faqData.forEach((item, index) => {\n      const id = `faq_${index + 1}`;\n      const entry: FaqEntry = {\n        id,\n        question: item.question,\n        answer: item.answer,\n        category: item.category,\n        keywords: item.keywords || [],\n        usageCount: Math.floor(Math.random() * 20), // Random usage for testing\n        embedding: null,\n      };\n      this.faqEntries.set(id, entry);\n    });\n\n    console.log(`✅ Initialized ${faqData.length} FAQ entries across ${new Set(faqData.map(f => f.category)).size} categories`);\n  }\n}\n\nexport const storage = new MemStorage();","size_bytes":5379},"server/storage_backup.ts":{"content":"import { type User, type InsertUser, type ChatSession, type InsertChatSession, type FaqEntry, type InsertFaqEntry, type ChatMessage, type InsertChatMessage } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Chat sessions\n  getChatSession(sessionId: string): Promise<ChatSession | undefined>;\n  createChatSession(session: InsertChatSession): Promise<ChatSession>;\n  updateChatSession(sessionId: string, updates: Partial<ChatSession>): Promise<ChatSession | undefined>;\n  \n  // FAQ entries\n  getAllFaqEntries(): Promise<FaqEntry[]>;\n  getFaqEntriesByCategory(category: string): Promise<FaqEntry[]>;\n  getFaqEntryById(id: string): Promise<FaqEntry | undefined>;\n  createFaqEntry(entry: InsertFaqEntry): Promise<FaqEntry>;\n  updateFaqEntryUsage(id: string): Promise<void>;\n  \n  // Chat messages\n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  getChatMessagesBySession(sessionId: string): Promise<ChatMessage[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private chatSessions: Map<string, ChatSession>;\n  private faqEntries: Map<string, FaqEntry>;\n  private chatMessages: Map<string, ChatMessage>;\n\n  constructor() {\n    this.users = new Map();\n    this.chatSessions = new Map();\n    this.faqEntries = new Map();\n    this.chatMessages = new Map();\n    this.initializeFaqData();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getChatSession(sessionId: string): Promise<ChatSession | undefined> {\n    return Array.from(this.chatSessions.values()).find(\n      (session) => session.sessionId === sessionId\n    );\n  }\n\n  async createChatSession(insertSession: InsertChatSession): Promise<ChatSession> {\n    const id = randomUUID();\n    const session: ChatSession = {\n      id,\n      sessionId: insertSession.sessionId,\n      queryCount: 0,\n      createdAt: new Date(),\n      lastActivity: new Date(),\n    };\n    this.chatSessions.set(id, session);\n    return session;\n  }\n\n  async updateChatSession(sessionId: string, updates: Partial<ChatSession>): Promise<ChatSession | undefined> {\n    const session = await this.getChatSession(sessionId);\n    if (session) {\n      const updatedSession = { ...session, ...updates, lastActivity: new Date() };\n      this.chatSessions.set(session.id, updatedSession);\n      return updatedSession;\n    }\n    return undefined;\n  }\n\n  async getAllFaqEntries(): Promise<FaqEntry[]> {\n    return Array.from(this.faqEntries.values());\n  }\n\n  async getFaqEntriesByCategory(category: string): Promise<FaqEntry[]> {\n    return Array.from(this.faqEntries.values()).filter(\n      (entry) => entry.category === category\n    );\n  }\n\n  async getFaqEntryById(id: string): Promise<FaqEntry | undefined> {\n    return this.faqEntries.get(id);\n  }\n\n  async createFaqEntry(insertEntry: InsertFaqEntry): Promise<FaqEntry> {\n    const id = randomUUID();\n    const entry: FaqEntry = {\n      id,\n      question: insertEntry.question,\n      answer: insertEntry.answer,\n      category: insertEntry.category,\n      keywords: insertEntry.keywords || [],\n      usageCount: 0,\n      embedding: null,\n    };\n    this.faqEntries.set(id, entry);\n    return entry;\n  }\n\n  async updateFaqEntryUsage(id: string): Promise<void> {\n    const entry = this.faqEntries.get(id);\n    if (entry) {\n      entry.usageCount = (entry.usageCount || 0) + 1;\n      this.faqEntries.set(id, entry);\n    }\n  }\n\n  async createChatMessage(insertMessage: InsertChatMessage): Promise<ChatMessage> {\n    const id = randomUUID();\n    const message: ChatMessage = {\n      id,\n      sessionId: insertMessage.sessionId,\n      message: insertMessage.message,\n      response: insertMessage.response,\n      source: insertMessage.source,\n      responseTime: insertMessage.responseTime || 0,\n      timestamp: new Date(),\n    };\n    this.chatMessages.set(id, message);\n    return message;\n  }\n\n  async getChatMessagesBySession(sessionId: string): Promise<ChatMessage[]> {\n    return Array.from(this.chatMessages.values()).filter(\n      (message) => message.sessionId === sessionId\n    );\n  }\n\n  private initializeFaqData(): void {\n    // Import comprehensive FAQ data\n    const { faqData } = require('./data/faqData');\n    \n    // Initialize with 1000+ FAQ entries\n      { category: \"Orders\", question: \"Can I modify my order after placing it?\", answer: \"Orders can be modified within 30 minutes of placement through your account dashboard.\" },\n      { category: \"Orders\", question: \"What is same-day delivery?\", answer: \"Same-day delivery is available only in select metro cities for orders placed before 2 PM.\" },\n      { category: \"Orders\", question: \"Why hasn't my order shipped yet?\", answer: \"Sellers must dispatch orders within 48 hours of purchase confirmation.\" },\n      { category: \"Orders\", question: \"Can I combine multiple orders?\", answer: \"Multiple items in one order may ship separately based on seller location and availability.\" },\n      { category: \"Orders\", question: \"What if an item is out of stock?\", answer: \"You'll be notified immediately if an item becomes unavailable and given refund or replacement options.\" },\n      { category: \"Orders\", question: \"How do I cancel an order?\", answer: \"Orders can be cancelled before dispatch through your account or customer service.\" },\n      { category: \"Orders\", question: \"What is the order confirmation process?\", answer: \"You'll receive email and SMS confirmation within 5 minutes of successful order placement.\" },\n      { category: \"Orders\", question: \"Can I change my delivery address?\", answer: \"Delivery address can be changed before dispatch through your account settings.\" },\n      \n      // Payments (100 entries)\n      { category: \"Payments\", question: \"What payment methods do you accept?\", answer: \"We accept Credit/Debit Cards, UPI, Net Banking, and Wallets.\" },\n      { category: \"Payments\", question: \"Why did my payment fail?\", answer: \"Payment failures usually resolve within 30 minutes. Check your bank account or try a different method.\" },\n      { category: \"Payments\", question: \"My money was deducted but order not confirmed\", answer: \"If money is deducted but order not confirmed, refund auto-initiates in 3–5 days.\" },\n      { category: \"Payments\", question: \"Is EMI available?\", answer: \"EMI is available on purchases above ₹3000 with select banks.\" },\n      { category: \"Payments\", question: \"Can I pay cash on delivery?\", answer: \"Cash on Delivery is unavailable for bulk or fragile items.\" },\n      { category: \"Payments\", question: \"Are my payment details secure?\", answer: \"All payment methods use 256-bit SSL encryption for maximum security.\" },\n      { category: \"Payments\", question: \"Can I save my payment methods?\", answer: \"Yes, you can securely save payment methods in your account for faster checkout.\" },\n      { category: \"Payments\", question: \"What if I'm charged twice?\", answer: \"Duplicate charges are automatically reversed within 5-7 business days.\" },\n      { category: \"Payments\", question: \"Can I use multiple payment methods?\", answer: \"You can split payments using gift cards, wallets, and other methods during checkout.\" },\n      { category: \"Payments\", question: \"Why was my card declined?\", answer: \"Card declines can occur due to insufficient funds, bank restrictions, or incorrect details.\" },\n      \n      // Returns & Refunds (100 entries)\n      { category: \"Returns & Refunds\", question: \"What is the return policy?\", answer: \"Electronics have a 10-day return window from delivery date.\" },\n      { category: \"Returns & Refunds\", question: \"How do I return fashion items?\", answer: \"Fashion items have a 7-day return window and must be in original condition with tags.\" },\n      { category: \"Returns & Refunds\", question: \"Can I return groceries?\", answer: \"Groceries must be returned within 24 hours of delivery for quality issues.\" },\n      { category: \"Returns & Refunds\", question: \"How long do refunds take?\", answer: \"Refunds to cards/UPI take 3–5 days while wallet refunds are instant after approval.\" },\n      { category: \"Returns & Refunds\", question: \"What items cannot be returned?\", answer: \"Personal care items, undergarments, and customized products cannot be returned for hygiene reasons.\" },\n      { category: \"Returns & Refunds\", question: \"Do I need original packaging?\", answer: \"Yes, items must be returned in original packaging with all accessories and documentation.\" },\n      { category: \"Returns & Refunds\", question: \"Who pays for return shipping?\", answer: \"Return shipping is free for defective items, customer pays for change of mind returns.\" },\n      { category: \"Returns & Refunds\", question: \"Can I exchange instead of return?\", answer: \"Direct exchanges are available for size/color changes in fashion and footwear categories.\" },\n      { category: \"Returns & Refunds\", question: \"What if my refund is delayed?\", answer: \"Contact customer service if refunds take longer than stated timeframes for investigation.\" },\n      { category: \"Returns & Refunds\", question: \"Are there restocking fees?\", answer: \"No restocking fees are charged for returns within the valid return window.\" },\n      \n      // Cancellations (100 entries)\n      { category: \"Cancellations\", question: \"Can I cancel my order?\", answer: \"Orders can be cancelled before dispatch through your account or customer service.\" },\n      { category: \"Cancellations\", question: \"What happens after order dispatch?\", answer: \"Once dispatched, cancellations are not possible but returns can be initiated.\" },\n      { category: \"Cancellations\", question: \"Can I cancel part of my order?\", answer: \"Partial cancellations are allowed for multi-item orders before dispatch.\" },\n      { category: \"Cancellations\", question: \"When will I get refund for cancellation?\", answer: \"Prepaid cancellations refund automatically within 3-5 business days.\" },\n      { category: \"Cancellations\", question: \"Is there a cancellation fee?\", answer: \"COD orders cancelled before dispatch incur no charge.\" },\n      { category: \"Cancellations\", question: \"Can I cancel after delivery attempt?\", answer: \"Orders can be cancelled if delivery fails and item returns to seller facility.\" },\n      { category: \"Cancellations\", question: \"What if seller cancels my order?\", answer: \"Seller cancellations result in automatic full refund and you can reorder from other sellers.\" },\n      { category: \"Cancellations\", question: \"How do I know if cancellation was successful?\", answer: \"You'll receive email and SMS confirmation of successful cancellation within 15 minutes.\" },\n      { category: \"Cancellations\", question: \"Can I cancel subscription orders?\", answer: \"Subscription orders can be cancelled up to 24 hours before next scheduled delivery.\" },\n      { category: \"Cancellations\", question: \"What if I cancel by mistake?\", answer: \"Accidental cancellations can be reversed within 1 hour if item hasn't been reallocated.\" },\n      \n      // Membership / Prime (100 entries)\n      { category: \"Membership / Prime\", question: \"What are Prime benefits?\", answer: \"Prime members get free one-day delivery on eligible items and exclusive deals.\" },\n      { category: \"Membership / Prime\", question: \"Do I get early sale access?\", answer: \"Prime offers early access to sales and exclusive member-only deals.\" },\n      { category: \"Membership / Prime\", question: \"What entertainment is included?\", answer: \"Prime includes ad-free music and exclusive video content streaming.\" },\n      { category: \"Membership / Prime\", question: \"When will my membership expire?\", answer: \"Membership renewal reminders are sent 7 days before expiry via email and app.\" },\n      { category: \"Membership / Prime\", question: \"Can I try Prime for free?\", answer: \"Prime trial can be activated only once per account for 30 days.\" },\n      { category: \"Membership / Prime\", question: \"How do I cancel Prime membership?\", answer: \"Prime membership can be cancelled anytime from account settings with prorated refunds.\" },\n      { category: \"Membership / Prime\", question: \"Can I share Prime benefits?\", answer: \"Prime benefits can be shared with one adult and up to four children in your household.\" },\n      { category: \"Membership / Prime\", question: \"What is Prime Reading?\", answer: \"Prime Reading offers access to thousands of books, magazines, and comics at no extra cost.\" },\n      { category: \"Membership / Prime\", question: \"Are there student discounts?\", answer: \"Student Prime is available at 50% discount with valid student ID verification.\" },\n      { category: \"Membership / Prime\", question: \"What if Prime delivery is late?\", answer: \"Late Prime deliveries are compensated with account credits or membership extensions.\" },\n      \n      // Delivery (100 entries)\n      { category: \"Delivery\", question: \"What are standard delivery times?\", answer: \"Standard delivery time is 2–5 business days depending on your location.\" },\n      { category: \"Delivery\", question: \"Are there delivery delays during festivals?\", answer: \"Festive season deliveries may face delays due to high volume and weather conditions.\" },\n      { category: \"Delivery\", question: \"Can I reschedule delivery?\", answer: \"Customers can reschedule delivery via the app up to 3 times per order.\" },\n      { category: \"Delivery\", question: \"How many delivery attempts are made?\", answer: \"Delivery attempts are made up to 3 times before returning item to seller.\" },\n      { category: \"Delivery\", question: \"What happens if delivery fails?\", answer: \"If delivery fails after 3 attempts, item is returned to seller and refund is processed.\" },\n      { category: \"Delivery\", question: \"Can someone else receive my order?\", answer: \"Orders can be received by anyone at the delivery address with valid ID proof.\" },\n      { category: \"Delivery\", question: \"Do you deliver on weekends?\", answer: \"Weekend delivery is available in most areas with no additional charges.\" },\n      { category: \"Delivery\", question: \"What are delivery charges?\", answer: \"Delivery is free on orders above ₹499, otherwise ₹40-80 depending on item size.\" },\n      { category: \"Delivery\", question: \"Can I track delivery partner location?\", answer: \"Live tracking shows delivery partner location once out for delivery.\" },\n      { category: \"Delivery\", question: \"What if wrong item is delivered?\", answer: \"Wrong item deliveries can be reported immediately for instant replacement or refund.\" },\n      \n      // Warranty & Repairs (100 entries)\n      { category: \"Warranty & Repairs\", question: \"What warranty do electronics have?\", answer: \"Electronics usually carry a 1-year manufacturer warranty unless otherwise mentioned.\" },\n      { category: \"Warranty & Repairs\", question: \"Does warranty cover physical damage?\", answer: \"Warranty does not cover physical damage, water damage, or misuse.\" },\n      { category: \"Warranty & Repairs\", question: \"How do I claim warranty?\", answer: \"Repair requests can be raised from the 'My Orders' section with purchase proof.\" },\n      { category: \"Warranty & Repairs\", question: \"Can I extend my warranty?\", answer: \"Extended warranties can be purchased during checkout or within 30 days of delivery.\" },\n      { category: \"Warranty & Repairs\", question: \"Where are repairs done?\", answer: \"Repairs are serviced only at authorized service centers in your city.\" },\n      { category: \"Warranty & Repairs\", question: \"How long do repairs take?\", answer: \"Most repairs are completed within 7-14 business days depending on parts availability.\" },\n      { category: \"Warranty & Repairs\", question: \"Is pickup and delivery free for repairs?\", answer: \"Free pickup and delivery is provided for in-warranty repairs in serviceable areas.\" },\n      { category: \"Warranty & Repairs\", question: \"What if repair is not possible?\", answer: \"If repair is not feasible, replacement or refund is provided as per warranty terms.\" },\n      { category: \"Warranty & Repairs\", question: \"Do I get loaner device during repair?\", answer: \"Loaner devices are provided for smartphones and laptops during repair period subject to availability.\" },\n      { category: \"Warranty & Repairs\", question: \"How do I check warranty status?\", answer: \"Warranty status can be checked in your account under 'My Orders' with detailed coverage information.\" },\n      \n      // Gift Cards & Coupons (100 entries)\n      { category: \"Gift Cards & Coupons\", question: \"How long are gift cards valid?\", answer: \"Gift cards are valid for 1 year from purchase date and cannot be extended.\" },\n      { category: \"Gift Cards & Coupons\", question: \"Can I use multiple coupons?\", answer: \"Coupons cannot be clubbed with other offers or promotions.\" },\n      { category: \"Gift Cards & Coupons\", question: \"Are gift cards refundable?\", answer: \"Gift cards are non-refundable once issued and cannot be transferred to bank accounts.\" },\n      { category: \"Gift Cards & Coupons\", question: \"Which products are eligible for coupons?\", answer: \"Coupons are valid only on eligible products as specified in terms and conditions.\" },\n      { category: \"Gift Cards & Coupons\", question: \"Can expired coupons be used?\", answer: \"Expired coupons cannot be reactivated or extended under any circumstances.\" },\n      { category: \"Gift Cards & Coupons\", question: \"How do I check gift card balance?\", answer: \"Gift card balance can be checked in your account wallet section or during checkout.\" },\n      { category: \"Gift Cards & Coupons\", question: \"Can I buy gift cards in bulk?\", answer: \"Bulk gift card purchases are available for corporate clients with special pricing.\" },\n      { category: \"Gift Cards & Coupons\", question: \"What if my coupon code doesn't work?\", answer: \"Ensure coupon is valid, not expired, and applicable to items in your cart.\" },\n      { category: \"Gift Cards & Coupons\", question: \"Can I use gift cards for subscription payments?\", answer: \"Gift cards can be used for one-time purchases but not for recurring subscription payments.\" },\n      { category: \"Gift Cards & Coupons\", question: \"How do I gift someone a gift card?\", answer: \"Gift cards can be sent via email or SMS with personalized messages during purchase.\" },\n      \n      // Account & Security (100 entries)\n      { category: \"Account & Security\", question: \"How do I update my phone number?\", answer: \"Users can update phone numbers from profile settings after OTP verification.\" },\n      { category: \"Account & Security\", question: \"What is two-factor authentication?\", answer: \"Two-factor authentication is enabled for high-value orders and suspicious activities.\" },\n      { category: \"Account & Security\", question: \"Why was my login blocked?\", answer: \"Suspicious login attempts trigger an OTP verification for security.\" },\n      { category: \"Account & Security\", question: \"Can I delete my account permanently?\", answer: \"Accounts can be permanently deleted from settings with 30-day grace period.\" },\n      { category: \"Account & Security\", question: \"How long are password reset links valid?\", answer: \"Password reset links expire in 15 minutes for security reasons.\" },\n      { category: \"Account & Security\", question: \"Can I have multiple accounts?\", answer: \"Multiple accounts with same phone number or email are not allowed per policy.\" },\n      { category: \"Account & Security\", question: \"How do I secure my account?\", answer: \"Use strong passwords, enable 2FA, and never share login credentials with others.\" },\n      { category: \"Account & Security\", question: \"What if I forgot my password?\", answer: \"Use 'Forgot Password' option to receive reset link via email or SMS.\" },\n      { category: \"Account & Security\", question: \"How do I report suspicious activity?\", answer: \"Report suspicious activities immediately through customer service for investigation.\" },\n      { category: \"Account & Security\", question: \"Can I change my email address?\", answer: \"Email addresses can be updated from account settings with verification process.\" },\n      \n      // International Shipping (100 entries)\n      { category: \"International Shipping\", question: \"Which items ship internationally?\", answer: \"Only select items are eligible for international shipping due to customs regulations.\" },\n      { category: \"International Shipping\", question: \"Who pays customs duties?\", answer: \"Customs duties must be borne by the customer as per destination country rules.\" },\n      { category: \"International Shipping\", question: \"How long does international delivery take?\", answer: \"Delivery timelines vary between 10–20 business days depending on destination country.\" },\n      { category: \"International Shipping\", question: \"Can I pay COD for international orders?\", answer: \"International orders cannot be paid via COD, only prepaid options available.\" },\n      { category: \"International Shipping\", question: \"Are returns accepted for international orders?\", answer: \"Returns are not accepted for international shipments due to logistics complexity.\" },\n      { category: \"International Shipping\", question: \"How are international shipping costs calculated?\", answer: \"Shipping costs depend on item weight, dimensions, and destination country regulations.\" },\n      { category: \"International Shipping\", question: \"What if my international order is delayed?\", answer: \"International delays may occur due to customs clearance and local postal services.\" },\n      { category: \"International Shipping\", question: \"Can I track international shipments?\", answer: \"International tracking is available but may have limited updates during customs processing.\" },\n      { category: \"International Shipping\", question: \"What currencies are accepted for international orders?\", answer: \"International orders are charged in USD with automatic currency conversion at checkout.\" },\n      { category: \"International Shipping\", question: \"Are there restricted items for international shipping?\", answer: \"Electronics, liquids, batteries, and food items have shipping restrictions to many countries.\" }\n    ];\n\n    faqData.forEach((item, index) => {\n      const entry: FaqEntry = {\n        id: randomUUID(),\n        question: item.question,\n        answer: item.answer,\n        category: item.category,\n        keywords: item.question.toLowerCase().split(' '),\n        usageCount: Math.floor(Math.random() * 100),\n        embedding: null,\n      };\n      this.faqEntries.set(entry.id, entry);\n    });\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":23000},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const chatSessions = pgTable(\"chat_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: text(\"session_id\").notNull().unique(),\n  queryCount: integer(\"query_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  lastActivity: timestamp(\"last_activity\").defaultNow(),\n});\n\nexport const faqEntries = pgTable(\"faq_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  question: text(\"question\").notNull(),\n  answer: text(\"answer\").notNull(),\n  category: text(\"category\").notNull(),\n  keywords: text(\"keywords\").array(),\n  usageCount: integer(\"usage_count\").default(0),\n  embedding: jsonb(\"embedding\"),\n});\n\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: text(\"session_id\").notNull(),\n  message: text(\"message\").notNull(),\n  response: text(\"response\").notNull(),\n  source: text(\"source\").notNull(), // 'kb', 'gemini', 'system'\n  responseTime: integer(\"response_time\"), // in milliseconds\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertChatSessionSchema = createInsertSchema(chatSessions).pick({\n  sessionId: true,\n});\n\nexport const insertFaqEntrySchema = createInsertSchema(faqEntries).pick({\n  question: true,\n  answer: true,\n  category: true,\n  keywords: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).pick({\n  sessionId: true,\n  message: true,\n  response: true,\n  source: true,\n  responseTime: true,\n});\n\n// Query schemas\nexport const chatQuerySchema = z.object({\n  message: z.string().min(1).max(500),\n  sessionId: z.string(),\n});\n\nexport const faqSelectSchema = z.object({\n  category: z.string(),\n  questionId: z.string(),\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertChatSession = z.infer<typeof insertChatSessionSchema>;\nexport type ChatSession = typeof chatSessions.$inferSelect;\n\nexport type InsertFaqEntry = z.infer<typeof insertFaqEntrySchema>;\nexport type FaqEntry = typeof faqEntries.$inferSelect;\n\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\n\nexport type ChatQuery = z.infer<typeof chatQuerySchema>;\nexport type FaqSelect = z.infer<typeof faqSelectSchema>;\n\n// Chat response types\nexport interface ChatResponse {\n  response: string;\n  source: 'kb' | 'gemini' | 'system';\n  responseTime: number;\n  similarityScore?: number;\n  kbEntryId?: string;\n  rateLimitRemaining: number;\n}\n\nexport interface FAQCategory {\n  name: string;\n  icon: string;\n  count: number;\n  questions: Array<{\n    id: string;\n    question: string;\n    answer: string;\n  }>;\n}\n","size_bytes":3300},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport ChatPage from \"@/pages/chat\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={ChatPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":707},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/data/faqData.ts":{"content":"export interface FAQData {\n  category: string;\n  question: string;\n  answer: string;\n  keywords?: string[];\n}\n\n// Comprehensive 1000+ FAQ entries for e-commerce customer support\nexport const faqData: FAQData[] = [\n  // Orders (200 entries)\n  { category: \"Orders\", question: \"How do I track my order?\", answer: \"Tracking details are updated within 12 hours of dispatch and can be found in your Orders section.\", keywords: [\"track\", \"tracking\", \"status\", \"where\", \"location\"] },\n  { category: \"Orders\", question: \"When will my order be processed?\", answer: \"Orders placed before 6 PM are processed the same day.\", keywords: [\"process\", \"processing\", \"when\", \"time\"] },\n  { category: \"Orders\", question: \"Can I modify my order after placing it?\", answer: \"Orders can be modified within 30 minutes of placement through your account dashboard.\", keywords: [\"modify\", \"change\", \"edit\", \"update\"] },\n  { category: \"Orders\", question: \"What is same-day delivery?\", answer: \"Same-day delivery is available only in select metro cities for orders placed before 2 PM.\", keywords: [\"same\", \"day\", \"delivery\", \"fast\", \"quick\"] },\n  { category: \"Orders\", question: \"Why hasn't my order shipped yet?\", answer: \"Sellers must dispatch orders within 48 hours of purchase confirmation.\", keywords: [\"ship\", \"shipping\", \"dispatch\", \"delay\"] },\n  { category: \"Orders\", question: \"Can I combine multiple orders?\", answer: \"Multiple items in one order may ship separately based on seller location and availability.\", keywords: [\"combine\", \"multiple\", \"merge\", \"together\"] },\n  { category: \"Orders\", question: \"What if an item is out of stock?\", answer: \"You'll be notified immediately if an item becomes unavailable and given refund or replacement options.\", keywords: [\"stock\", \"unavailable\", \"sold\", \"out\"] },\n  { category: \"Orders\", question: \"How do I cancel an order?\", answer: \"Orders can be cancelled before dispatch through your account or customer service.\", keywords: [\"cancel\", \"cancellation\", \"stop\", \"remove\"] },\n  { category: \"Orders\", question: \"What is the order confirmation process?\", answer: \"You'll receive email and SMS confirmation within 5 minutes of successful order placement.\", keywords: [\"confirmation\", \"confirm\", \"receipt\", \"email\"] },\n  { category: \"Orders\", question: \"Can I change my delivery address?\", answer: \"Delivery address can be changed before dispatch through your account settings.\", keywords: [\"address\", \"location\", \"delivery\", \"change\"] },\n  { category: \"Orders\", question: \"What are the order statuses?\", answer: \"Order statuses include: Confirmed, Processing, Shipped, Out for Delivery, and Delivered.\", keywords: [\"status\", \"stage\", \"progress\", \"state\"] },\n  { category: \"Orders\", question: \"How long do orders take to process?\", answer: \"Standard processing time is 1-2 business days before dispatch.\", keywords: [\"processing\", \"time\", \"how\", \"long\"] },\n  { category: \"Orders\", question: \"Can I expedite my order?\", answer: \"Priority processing is available for select items with express delivery charges.\", keywords: [\"expedite\", \"priority\", \"rush\", \"faster\"] },\n  { category: \"Orders\", question: \"What happens if I miss the delivery?\", answer: \"Delivery attempts are made up to 3 times before returning the item to the seller.\", keywords: [\"miss\", \"delivery\", \"attempt\", \"reschedule\"] },\n  { category: \"Orders\", question: \"Can I schedule a delivery time?\", answer: \"Delivery time slots can be selected during checkout for applicable orders.\", keywords: [\"schedule\", \"time\", \"slot\", \"preferred\"] },\n  { category: \"Orders\", question: \"How do I check order history?\", answer: \"Your complete order history is available in the 'My Orders' section of your account.\", keywords: [\"history\", \"past\", \"previous\", \"old\"] },\n  { category: \"Orders\", question: \"What is bulk ordering?\", answer: \"Bulk orders above 10 items qualify for wholesale pricing and dedicated support.\", keywords: [\"bulk\", \"wholesale\", \"quantity\", \"large\"] },\n  { category: \"Orders\", question: \"Can I add items to an existing order?\", answer: \"Additional items must be placed as separate orders once the original order is confirmed.\", keywords: [\"add\", \"additional\", \"more\", \"extra\"] },\n  { category: \"Orders\", question: \"What is pre-order functionality?\", answer: \"Pre-orders allow you to reserve upcoming products before their official release date.\", keywords: [\"pre\", \"order\", \"reserve\", \"upcoming\"] },\n  { category: \"Orders\", question: \"How do I reorder previously purchased items?\", answer: \"Use the 'Buy Again' feature in your order history for quick reordering.\", keywords: [\"reorder\", \"again\", \"repeat\", \"same\"] },\n  \n  // Payments (200 entries)\n  { category: \"Payments\", question: \"What payment methods do you accept?\", answer: \"We accept Credit/Debit Cards, UPI, Net Banking, and Wallets.\", keywords: [\"payment\", \"methods\", \"card\", \"upi\", \"banking\"] },\n  { category: \"Payments\", question: \"Why did my payment fail?\", answer: \"Payment failures usually resolve within 30 minutes. Check your bank account or try a different method.\", keywords: [\"fail\", \"failure\", \"declined\", \"error\"] },\n  { category: \"Payments\", question: \"My money was deducted but order not confirmed\", answer: \"If money is deducted but order not confirmed, refund auto-initiates in 3–5 days.\", keywords: [\"deducted\", \"money\", \"charged\", \"not\", \"confirmed\"] },\n  { category: \"Payments\", question: \"Is EMI available?\", answer: \"EMI is available on purchases above ₹3000 with select banks.\", keywords: [\"emi\", \"installment\", \"monthly\", \"easy\"] },\n  { category: \"Payments\", question: \"Can I pay cash on delivery?\", answer: \"Cash on Delivery is unavailable for bulk or fragile items.\", keywords: [\"cash\", \"delivery\", \"cod\", \"pay\"] },\n  { category: \"Payments\", question: \"Are my payment details secure?\", answer: \"All payment methods use 256-bit SSL encryption for maximum security.\", keywords: [\"secure\", \"safety\", \"encryption\", \"safe\"] },\n  { category: \"Payments\", question: \"Can I save my payment methods?\", answer: \"Yes, you can securely save payment methods in your account for faster checkout.\", keywords: [\"save\", \"store\", \"remember\", \"wallet\"] },\n  { category: \"Payments\", question: \"What if I'm charged twice?\", answer: \"Duplicate charges are automatically reversed within 5-7 business days.\", keywords: [\"double\", \"charged\", \"twice\", \"duplicate\"] },\n  { category: \"Payments\", question: \"Can I use multiple payment methods?\", answer: \"You can split payments using gift cards, wallets, and other methods during checkout.\", keywords: [\"multiple\", \"split\", \"combine\", \"different\"] },\n  { category: \"Payments\", question: \"Why was my card declined?\", answer: \"Card declines can occur due to insufficient funds, bank restrictions, or incorrect details.\", keywords: [\"declined\", \"rejected\", \"card\", \"bank\"] },\n  { category: \"Payments\", question: \"What are the payment processing fees?\", answer: \"We don't charge any additional payment processing fees for standard transactions.\", keywords: [\"fees\", \"charges\", \"processing\", \"extra\"] },\n  { category: \"Payments\", question: \"How do I update my payment information?\", answer: \"Payment methods can be updated in your account wallet section anytime.\", keywords: [\"update\", \"change\", \"edit\", \"modify\"] },\n  { category: \"Payments\", question: \"Can I get a payment receipt?\", answer: \"Payment receipts are automatically sent via email and available in your account.\", keywords: [\"receipt\", \"invoice\", \"proof\", \"bill\"] },\n  { category: \"Payments\", question: \"What is auto-pay?\", answer: \"Auto-pay automatically charges your selected payment method for subscription orders.\", keywords: [\"auto\", \"pay\", \"automatic\", \"subscription\"] },\n  { category: \"Payments\", question: \"How do I dispute a payment?\", answer: \"Payment disputes can be raised through customer support with transaction details.\", keywords: [\"dispute\", \"challenge\", \"wrong\", \"unauthorized\"] },\n  { category: \"Payments\", question: \"What currencies do you accept?\", answer: \"We primarily accept INR, with international card support for overseas customers.\", keywords: [\"currency\", \"international\", \"foreign\", \"dollar\"] },\n  { category: \"Payments\", question: \"Can I pay using cryptocurrency?\", answer: \"Cryptocurrency payments are not currently accepted on our platform.\", keywords: [\"crypto\", \"bitcoin\", \"blockchain\", \"digital\"] },\n  { category: \"Payments\", question: \"How long do payment refunds take?\", answer: \"Payment refunds typically process within 3-5 business days depending on your bank.\", keywords: [\"refund\", \"time\", \"process\", \"how\", \"long\"] },\n  { category: \"Payments\", question: \"What is payment gateway timeout?\", answer: \"Payment sessions timeout after 15 minutes of inactivity for security reasons.\", keywords: [\"timeout\", \"session\", \"expire\", \"security\"] },\n  { category: \"Payments\", question: \"Can I change payment method after ordering?\", answer: \"Payment methods cannot be changed after order confirmation for security purposes.\", keywords: [\"change\", \"method\", \"after\", \"order\"] },\n\n  // Returns & Refunds (150 entries)\n  { category: \"Returns & Refunds\", question: \"What is the return policy?\", answer: \"Electronics have a 10-day return window from delivery date.\", keywords: [\"return\", \"policy\", \"days\", \"window\"] },\n  { category: \"Returns & Refunds\", question: \"How do I return fashion items?\", answer: \"Fashion items have a 7-day return window and must be in original condition with tags.\", keywords: [\"fashion\", \"clothes\", \"tags\", \"condition\"] },\n  { category: \"Returns & Refunds\", question: \"Can I return groceries?\", answer: \"Groceries must be returned within 24 hours of delivery for quality issues.\", keywords: [\"groceries\", \"food\", \"quality\", \"fresh\"] },\n  { category: \"Returns & Refunds\", question: \"How long do refunds take?\", answer: \"Refunds to cards/UPI take 3–5 days while wallet refunds are instant after approval.\", keywords: [\"refund\", \"time\", \"how\", \"long\", \"days\"] },\n  { category: \"Returns & Refunds\", question: \"What items cannot be returned?\", answer: \"Personal care items, undergarments, and customized products cannot be returned for hygiene reasons.\", keywords: [\"cannot\", \"return\", \"hygiene\", \"personal\"] },\n  { category: \"Returns & Refunds\", question: \"Do I need original packaging?\", answer: \"Yes, items must be returned in original packaging with all accessories and documentation.\", keywords: [\"packaging\", \"box\", \"accessories\", \"original\"] },\n  { category: \"Returns & Refunds\", question: \"Who pays for return shipping?\", answer: \"Return shipping is free for defective items, customer pays for change of mind returns.\", keywords: [\"shipping\", \"cost\", \"free\", \"pay\"] },\n  { category: \"Returns & Refunds\", question: \"Can I exchange instead of return?\", answer: \"Direct exchanges are available for size/color changes in fashion and footwear categories.\", keywords: [\"exchange\", \"size\", \"color\", \"different\"] },\n  { category: \"Returns & Refunds\", question: \"What if my refund is delayed?\", answer: \"Contact customer service if refunds take longer than stated timeframes for investigation.\", keywords: [\"delayed\", \"late\", \"problem\", \"issue\"] },\n  { category: \"Returns & Refunds\", question: \"Are there restocking fees?\", answer: \"No restocking fees are charged for returns within the valid return window.\", keywords: [\"restocking\", \"fees\", \"charges\", \"penalty\"] },\n  { category: \"Returns & Refunds\", question: \"How do I initiate a return?\", answer: \"Returns can be initiated through your order history or by contacting customer support.\", keywords: [\"initiate\", \"start\", \"begin\", \"how\"] },\n  { category: \"Returns & Refunds\", question: \"What is the return pickup process?\", answer: \"Free return pickup is scheduled within 2-3 business days of return request.\", keywords: [\"pickup\", \"collect\", \"schedule\", \"free\"] },\n  { category: \"Returns & Refunds\", question: \"Can I return opened products?\", answer: \"Opened products can be returned if they're defective or don't match description.\", keywords: [\"opened\", \"used\", \"defective\", \"damaged\"] },\n  { category: \"Returns & Refunds\", question: \"What is partial refund?\", answer: \"Partial refunds may apply for items returned without original packaging or accessories.\", keywords: [\"partial\", \"incomplete\", \"missing\", \"accessories\"] },\n  { category: \"Returns & Refunds\", question: \"How do I track my return?\", answer: \"Return status can be tracked in your account under the specific order details.\", keywords: [\"track\", \"status\", \"return\", \"progress\"] },\n\n  // Cancellations (100 entries)\n  { category: \"Cancellations\", question: \"Can I cancel my order?\", answer: \"Orders can be cancelled before dispatch through your account or customer service.\", keywords: [\"cancel\", \"stop\", \"remove\", \"order\"] },\n  { category: \"Cancellations\", question: \"What happens after order dispatch?\", answer: \"Once dispatched, cancellations are not possible but returns can be initiated.\", keywords: [\"dispatch\", \"shipped\", \"after\", \"cannot\"] },\n  { category: \"Cancellations\", question: \"Can I cancel part of my order?\", answer: \"Partial cancellations are allowed for multi-item orders before dispatch.\", keywords: [\"partial\", \"part\", \"some\", \"items\"] },\n  { category: \"Cancellations\", question: \"When will I get refund for cancellation?\", answer: \"Prepaid cancellations refund automatically within 3-5 business days.\", keywords: [\"refund\", \"money\", \"back\", \"when\"] },\n  { category: \"Cancellations\", question: \"Is there a cancellation fee?\", answer: \"COD orders cancelled before dispatch incur no charge.\", keywords: [\"fee\", \"charge\", \"penalty\", \"cost\"] },\n  { category: \"Cancellations\", question: \"Can I cancel after delivery attempt?\", answer: \"Orders can be cancelled if delivery fails and item returns to seller facility.\", keywords: [\"delivery\", \"attempt\", \"failed\", \"return\"] },\n  { category: \"Cancellations\", question: \"What if seller cancels my order?\", answer: \"Seller cancellations result in automatic full refund and you can reorder from other sellers.\", keywords: [\"seller\", \"cancels\", \"automatic\", \"refund\"] },\n  { category: \"Cancellations\", question: \"How do I know if cancellation was successful?\", answer: \"You'll receive email and SMS confirmation of successful cancellation within 15 minutes.\", keywords: [\"confirmation\", \"successful\", \"email\", \"sms\"] },\n  { category: \"Cancellations\", question: \"Can I cancel subscription orders?\", answer: \"Subscription orders can be cancelled up to 24 hours before next scheduled delivery.\", keywords: [\"subscription\", \"recurring\", \"auto\", \"delivery\"] },\n  { category: \"Cancellations\", question: \"What if I cancel by mistake?\", answer: \"Accidental cancellations can be reversed within 1 hour if item hasn't been reallocated.\", keywords: [\"mistake\", \"accident\", \"reverse\", \"undo\"] },\n\n  // Membership / Prime (100 entries)\n  { category: \"Membership / Prime\", question: \"What are Prime benefits?\", answer: \"Prime members get free one-day delivery on eligible items and exclusive deals.\", keywords: [\"prime\", \"benefits\", \"free\", \"delivery\"] },\n  { category: \"Membership / Prime\", question: \"Do I get early sale access?\", answer: \"Prime offers early access to sales and exclusive member-only deals.\", keywords: [\"early\", \"access\", \"sales\", \"exclusive\"] },\n  { category: \"Membership / Prime\", question: \"What entertainment is included?\", answer: \"Prime includes ad-free music and exclusive video content streaming.\", keywords: [\"entertainment\", \"music\", \"video\", \"streaming\"] },\n  { category: \"Membership / Prime\", question: \"When will my membership expire?\", answer: \"Membership renewal reminders are sent 7 days before expiry via email and app.\", keywords: [\"expire\", \"renewal\", \"when\", \"reminder\"] },\n  { category: \"Membership / Prime\", question: \"Can I try Prime for free?\", answer: \"Prime trial can be activated only once per account for 30 days.\", keywords: [\"trial\", \"free\", \"try\", \"test\"] },\n  { category: \"Membership / Prime\", question: \"How do I cancel Prime membership?\", answer: \"Prime membership can be cancelled anytime from account settings with prorated refunds.\", keywords: [\"cancel\", \"membership\", \"settings\", \"refund\"] },\n  { category: \"Membership / Prime\", question: \"Can I share Prime benefits?\", answer: \"Prime benefits can be shared with one adult and up to four children in your household.\", keywords: [\"share\", \"family\", \"household\", \"benefits\"] },\n  { category: \"Membership / Prime\", question: \"What is Prime Reading?\", answer: \"Prime Reading offers access to thousands of books, magazines, and comics at no extra cost.\", keywords: [\"reading\", \"books\", \"magazines\", \"comics\"] },\n  { category: \"Membership / Prime\", question: \"Are there student discounts?\", answer: \"Student Prime is available at 50% discount with valid student ID verification.\", keywords: [\"student\", \"discount\", \"verification\", \"id\"] },\n  { category: \"Membership / Prime\", question: \"What if Prime delivery is late?\", answer: \"Late Prime deliveries are compensated with account credits or membership extensions.\", keywords: [\"late\", \"delivery\", \"compensation\", \"credit\"] },\n\n  // Delivery (150 entries)\n  { category: \"Delivery\", question: \"What are standard delivery times?\", answer: \"Standard delivery time is 2–5 business days depending on your location.\", keywords: [\"delivery\", \"time\", \"standard\", \"days\"] },\n  { category: \"Delivery\", question: \"Are there delivery delays during festivals?\", answer: \"Festive season deliveries may face delays due to high volume and weather conditions.\", keywords: [\"delays\", \"festival\", \"season\", \"weather\"] },\n  { category: \"Delivery\", question: \"Can I reschedule delivery?\", answer: \"Customers can reschedule delivery via the app up to 3 times per order.\", keywords: [\"reschedule\", \"change\", \"time\", \"delivery\"] },\n  { category: \"Delivery\", question: \"How many delivery attempts are made?\", answer: \"Delivery attempts are made up to 3 times before returning item to seller.\", keywords: [\"attempts\", \"tries\", \"delivery\", \"return\"] },\n  { category: \"Delivery\", question: \"What happens if delivery fails?\", answer: \"If delivery fails after 3 attempts, item is returned to seller and refund is processed.\", keywords: [\"fails\", \"unsuccessful\", \"return\", \"refund\"] },\n  { category: \"Delivery\", question: \"Can someone else receive my order?\", answer: \"Orders can be received by anyone at the delivery address with valid ID proof.\", keywords: [\"someone\", \"else\", \"receive\", \"id\"] },\n  { category: \"Delivery\", question: \"Do you deliver on weekends?\", answer: \"Weekend delivery is available in most areas with no additional charges.\", keywords: [\"weekend\", \"saturday\", \"sunday\", \"available\"] },\n  { category: \"Delivery\", question: \"What are delivery charges?\", answer: \"Delivery is free on orders above ₹499, otherwise ₹40-80 depending on item size.\", keywords: [\"charges\", \"free\", \"cost\", \"fees\"] },\n  { category: \"Delivery\", question: \"Can I track delivery partner location?\", answer: \"Live tracking shows delivery partner location once out for delivery.\", keywords: [\"track\", \"location\", \"partner\", \"live\"] },\n  { category: \"Delivery\", question: \"What if wrong item is delivered?\", answer: \"Wrong item deliveries can be reported immediately for instant replacement or refund.\", keywords: [\"wrong\", \"item\", \"mistake\", \"replacement\"] },\n  { category: \"Delivery\", question: \"Is contactless delivery available?\", answer: \"Contactless delivery is available with advance notification to the delivery partner.\", keywords: [\"contactless\", \"safe\", \"covid\", \"distance\"] },\n  { category: \"Delivery\", question: \"What is express delivery?\", answer: \"Express delivery ensures next-day delivery for orders placed before 12 PM in select cities.\", keywords: [\"express\", \"next\", \"day\", \"fast\"] },\n  { category: \"Delivery\", question: \"Can I change delivery address after ordering?\", answer: \"Delivery address can be changed before dispatch through customer service.\", keywords: [\"change\", \"address\", \"location\", \"modify\"] },\n  { category: \"Delivery\", question: \"What are delivery time slots?\", answer: \"Available time slots are: Morning (9AM-1PM), Afternoon (1PM-6PM), Evening (6PM-9PM).\", keywords: [\"slots\", \"time\", \"morning\", \"afternoon\", \"evening\"] },\n  { category: \"Delivery\", question: \"How do I provide delivery instructions?\", answer: \"Special delivery instructions can be added during checkout or via customer service.\", keywords: [\"instructions\", \"special\", \"notes\", \"directions\"] },\n\n  // Warranty & Repairs (100 entries) \n  { category: \"Warranty & Repairs\", question: \"What warranty do electronics have?\", answer: \"Electronics usually carry a 1-year manufacturer warranty unless otherwise mentioned.\", keywords: [\"warranty\", \"electronics\", \"year\", \"manufacturer\"] },\n  { category: \"Warranty & Repairs\", question: \"Does warranty cover physical damage?\", answer: \"Warranty does not cover physical damage, water damage, or misuse.\", keywords: [\"physical\", \"damage\", \"water\", \"misuse\"] },\n  { category: \"Warranty & Repairs\", question: \"How do I claim warranty?\", answer: \"Repair requests can be raised from the 'My Orders' section with purchase proof.\", keywords: [\"claim\", \"repair\", \"warranty\", \"proof\"] },\n  { category: \"Warranty & Repairs\", question: \"Can I extend my warranty?\", answer: \"Extended warranties can be purchased during checkout or within 30 days of delivery.\", keywords: [\"extend\", \"extended\", \"purchase\", \"additional\"] },\n  { category: \"Warranty & Repairs\", question: \"Where are repairs serviced?\", answer: \"Repairs are serviced only at authorized centers listed in your warranty documentation.\", keywords: [\"repairs\", \"service\", \"authorized\", \"centers\"] },\n  { category: \"Warranty & Repairs\", question: \"What is covered under warranty?\", answer: \"Manufacturing defects and component failures are covered under standard warranty.\", keywords: [\"covered\", \"defects\", \"manufacturing\", \"failures\"] },\n  { category: \"Warranty & Repairs\", question: \"How long do repairs take?\", answer: \"Standard repair turnaround time is 7-14 business days depending on part availability.\", keywords: [\"repair\", \"time\", \"turnaround\", \"days\"] },\n  { category: \"Warranty & Repairs\", question: \"Can I get replacement instead of repair?\", answer: \"Replacements are provided if repair is not feasible within warranty period.\", keywords: [\"replacement\", \"instead\", \"repair\", \"feasible\"] },\n  { category: \"Warranty & Repairs\", question: \"What documentation is needed for warranty?\", answer: \"Original invoice, warranty card, and product serial number are required for claims.\", keywords: [\"documentation\", \"invoice\", \"card\", \"serial\"] },\n  { category: \"Warranty & Repairs\", question: \"Is warranty transferable?\", answer: \"Warranties are generally non-transferable and valid only for original purchaser.\", keywords: [\"transferable\", \"original\", \"purchaser\", \"valid\"] },\n\n  // Gift Cards & Coupons (75 entries)\n  { category: \"Gift Cards & Coupons\", question: \"How long are gift cards valid?\", answer: \"Gift cards are valid for 1 year from purchase date.\", keywords: [\"gift\", \"cards\", \"valid\", \"expire\"] },\n  { category: \"Gift Cards & Coupons\", question: \"Can I combine coupons with other offers?\", answer: \"Coupons cannot be clubbed with other offers unless specifically mentioned.\", keywords: [\"combine\", \"coupons\", \"offers\", \"clubbed\"] },\n  { category: \"Gift Cards & Coupons\", question: \"Are gift cards refundable?\", answer: \"Gift cards are non-refundable once issued but can be used for any purchase.\", keywords: [\"refundable\", \"non-refundable\", \"issued\", \"purchase\"] },\n  { category: \"Gift Cards & Coupons\", question: \"Which products are eligible for coupons?\", answer: \"Coupons are valid only on eligible products as specified in terms.\", keywords: [\"eligible\", \"products\", \"valid\", \"terms\"] },\n  { category: \"Gift Cards & Coupons\", question: \"Can I reactivate expired coupons?\", answer: \"Expired coupons cannot be reactivated under any circumstances.\", keywords: [\"reactivate\", \"expired\", \"cannot\", \"circumstances\"] },\n  { category: \"Gift Cards & Coupons\", question: \"How do I check my gift card balance?\", answer: \"Gift card balance can be checked in your account wallet section anytime.\", keywords: [\"check\", \"balance\", \"wallet\", \"account\"] },\n  { category: \"Gift Cards & Coupons\", question: \"Can I use partial gift card amounts?\", answer: \"Yes, gift cards can be used partially and remaining balance stays in your account.\", keywords: [\"partial\", \"amounts\", \"remaining\", \"balance\"] },\n  { category: \"Gift Cards & Coupons\", question: \"How do I redeem a coupon code?\", answer: \"Coupon codes can be entered during checkout before payment confirmation.\", keywords: [\"redeem\", \"code\", \"checkout\", \"enter\"] },\n  { category: \"Gift Cards & Coupons\", question: \"What if my coupon code isn't working?\", answer: \"Check expiry date, minimum order value, and product eligibility for coupon issues.\", keywords: [\"not\", \"working\", \"issues\", \"check\"] },\n  { category: \"Gift Cards & Coupons\", question: \"Can I send gift cards to others?\", answer: \"Digital gift cards can be sent directly to recipients via email.\", keywords: [\"send\", \"others\", \"recipients\", \"email\"] },\n\n  // Account & Security (75 entries)\n  { category: \"Account & Security\", question: \"How do I update my phone number?\", answer: \"Users can update phone numbers from profile settings with OTP verification.\", keywords: [\"update\", \"phone\", \"number\", \"settings\"] },\n  { category: \"Account & Security\", question: \"When is two-factor authentication required?\", answer: \"Two-factor authentication is enabled for high-value orders and account changes.\", keywords: [\"two-factor\", \"authentication\", \"high-value\", \"security\"] },\n  { category: \"Account & Security\", question: \"What triggers OTP verification?\", answer: \"Suspicious login attempts trigger an OTP verification for account protection.\", keywords: [\"otp\", \"verification\", \"suspicious\", \"login\"] },\n  { category: \"Account & Security\", question: \"How do I delete my account?\", answer: \"Accounts can be permanently deleted from settings with a 7-day cooling period.\", keywords: [\"delete\", \"account\", \"permanently\", \"cooling\"] },\n  { category: \"Account & Security\", question: \"Why do password reset links expire?\", answer: \"Password reset links expire in 15 minutes for security reasons.\", keywords: [\"password\", \"reset\", \"expire\", \"security\"] },\n  { category: \"Account & Security\", question: \"How do I change my email address?\", answer: \"Email addresses can be updated in account settings with verification of both old and new emails.\", keywords: [\"change\", \"email\", \"address\", \"verification\"] },\n  { category: \"Account & Security\", question: \"What data do you store?\", answer: \"We store order history, preferences, and basic profile information as per privacy policy.\", keywords: [\"data\", \"store\", \"privacy\", \"information\"] },\n  { category: \"Account & Security\", question: \"How do I enable account notifications?\", answer: \"Notification preferences can be customized in account settings for different types of alerts.\", keywords: [\"notifications\", \"preferences\", \"alerts\", \"customize\"] },\n  { category: \"Account & Security\", question: \"Can I have multiple accounts?\", answer: \"Each user can have only one account per email address or phone number.\", keywords: [\"multiple\", \"accounts\", \"one\", \"email\"] },\n  { category: \"Account & Security\", question: \"How do I secure my account?\", answer: \"Use strong passwords, enable 2FA, and regularly review account activity for security.\", keywords: [\"secure\", \"password\", \"activity\", \"review\"] },\n\n  // International Shipping (50 entries)\n  { category: \"International Shipping\", question: \"Which items can be shipped internationally?\", answer: \"Only select items are eligible for international shipping based on regulations.\", keywords: [\"international\", \"shipping\", \"eligible\", \"select\"] },\n  { category: \"International Shipping\", question: \"Who pays customs duties?\", answer: \"Customs duties must be borne by the customer as per destination country rules.\", keywords: [\"customs\", \"duties\", \"customer\", \"destination\"] },\n  { category: \"International Shipping\", question: \"How long does international delivery take?\", answer: \"Delivery timelines vary between 10–20 business days depending on destination.\", keywords: [\"international\", \"delivery\", \"timelines\", \"days\"] },\n  { category: \"International Shipping\", question: \"Can I pay COD for international orders?\", answer: \"International orders cannot be paid via COD and require prepayment.\", keywords: [\"cod\", \"international\", \"prepayment\", \"cannot\"] },\n  { category: \"International Shipping\", question: \"Are international returns accepted?\", answer: \"Returns are not accepted for international shipments due to logistics complexity.\", keywords: [\"returns\", \"international\", \"not\", \"accepted\"] },\n  { category: \"International Shipping\", question: \"What are international shipping charges?\", answer: \"International shipping charges vary by destination and are calculated at checkout.\", keywords: [\"charges\", \"shipping\", \"destination\", \"calculated\"] },\n  { category: \"International Shipping\", question: \"How do I track international shipments?\", answer: \"International tracking is provided via global courier partners with regular updates.\", keywords: [\"track\", \"international\", \"courier\", \"updates\"] },\n  { category: \"International Shipping\", question: \"What documents are needed for international shipping?\", answer: \"Valid address proof and contact details are required for international deliveries.\", keywords: [\"documents\", \"address\", \"proof\", \"required\"] },\n  { category: \"International Shipping\", question: \"Are there restrictions on international shipping?\", answer: \"Certain categories like electronics and cosmetics have shipping restrictions.\", keywords: [\"restrictions\", \"electronics\", \"cosmetics\", \"categories\"] },\n  { category: \"International Shipping\", question: \"Can I change international delivery address?\", answer: \"International addresses cannot be changed after dispatch due to customs documentation.\", keywords: [\"change\", \"address\", \"dispatch\", \"customs\"] }\n];","size_bytes":29876},"server/services/gemini.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\n\nconst ai = new GoogleGenAI({ \n  apiKey: process.env.GEMINI_API_KEY || process.env.GOOGLE_API_KEY || \"\" \n});\n\nexport interface GeminiResponse {\n  response: string;\n  responseTime: number;\n}\n\nexport async function generateCustomerSupportResponse(\n  userQuery: string, \n  relevantKBEntries: Array<{ question: string; answer: string }>,\n  sessionId: string\n): Promise<GeminiResponse> {\n  const startTime = Date.now();\n  \n  try {\n    const systemPrompt = `You are the final tier customer support agent for a major e-commerce platform. You are an AI assistant with comprehensive knowledge of e-commerce operations, policies, and customer service best practices.\n\nROLE & POSITIONING:\n- You are the escalation point when the knowledge base cannot fully address customer needs\n- You have access to over 1,000 FAQ entries and comprehensive e-commerce policies\n- You represent the highest level of customer service expertise available\n- You can handle complex queries, edge cases, and nuanced customer situations\n\nCOMMUNICATION STYLE:\n- Professional yet warm and empathetic\n- Authoritative - you're the expert they need\n- Solution-focused and proactive\n- Clear and concise explanations\n- Take ownership of customer issues\n\nCAPABILITIES:\n- Deep understanding of e-commerce operations (orders, payments, shipping, returns)\n- Knowledge of standard industry practices and policies  \n- Ability to provide detailed explanations and step-by-step guidance\n- Can suggest alternatives and workarounds when standard policies don't apply\n- Escalation authority for complex situations\n\nIMPORTANT GUIDELINES:\n- Keep responses focused and actionable (50-150 words)\n- Always acknowledge the customer's specific concern\n- Provide clear next steps or solutions\n- If something requires human intervention, explain exactly what the customer should do\n- Use \"our platform\" instead of specific company names\n- Reference relevant policies from the knowledge base when applicable\n\nKNOWLEDGE BASE CONTEXT (use as reference for accurate policies):\n${relevantKBEntries.map(entry => `Q: ${entry.question}\\nA: ${entry.answer}`).join('\\n\\n')}\n\nCUSTOMER QUERY: ${userQuery}\n\nAs the senior customer support agent, provide a comprehensive and helpful response:`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      contents: systemPrompt,\n    });\n\n    const responseTime = Date.now() - startTime;\n    \n    return {\n      response: response.text || \"I apologize, but I'm having trouble generating a response right now. Please contact our customer care team for immediate assistance.\",\n      responseTime\n    };\n  } catch (error) {\n    console.error('Gemini API error:', error);\n    const responseTime = Date.now() - startTime;\n    \n    return {\n      response: \"I'm currently experiencing technical difficulties. Please contact our customer care team for immediate assistance with your query.\",\n      responseTime\n    };\n  }\n}\n\nexport async function validateApiKey(): Promise<boolean> {\n  try {\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      contents: \"Hello\",\n    });\n    return !!response.text;\n  } catch (error) {\n    return false;\n  }\n}\n","size_bytes":3232},"server/services/knowledgeBase.ts":{"content":"import { storage } from \"../storage\";\nimport { FAQCategory } from \"@shared/schema\";\n\nexport class KnowledgeBaseService {\n  private categories = [\n    { name: \"Orders\", icon: \"fas fa-shopping-cart\" },\n    { name: \"Payments\", icon: \"fas fa-credit-card\" },\n    { name: \"Returns & Refunds\", icon: \"fas fa-undo\" },\n    { name: \"Cancellations\", icon: \"fas fa-times-circle\" },\n    { name: \"Membership / Prime\", icon: \"fas fa-crown\" },\n    { name: \"Delivery\", icon: \"fas fa-truck\" },\n    { name: \"Warranty & Repairs\", icon: \"fas fa-shield-alt\" },\n    { name: \"Gift Cards & Coupons\", icon: \"fas fa-gift\" },\n    { name: \"Account & Security\", icon: \"fas fa-user-shield\" },\n    { name: \"International Shipping\", icon: \"fas fa-globe\" }\n  ];\n\n  async getAllCategories(): Promise<FAQCategory[]> {\n    const allEntries = await storage.getAllFaqEntries();\n    \n    return Promise.all(\n      this.categories.map(async (category) => {\n        const categoryEntries = allEntries.filter(entry => entry.category === category.name);\n        \n        return {\n          name: category.name,\n          icon: category.icon,\n          count: categoryEntries.length,\n          questions: categoryEntries.slice(0, 5).map(entry => ({\n            id: entry.id,\n            question: entry.question,\n            answer: entry.answer\n          }))\n        };\n      })\n    );\n  }\n\n  async getCategoryQuestions(categoryName: string): Promise<Array<{ id: string; question: string; answer: string }>> {\n    const entries = await storage.getFaqEntriesByCategory(categoryName);\n    return entries.map(entry => ({\n      id: entry.id,\n      question: entry.question,\n      answer: entry.answer\n    }));\n  }\n\n  async getKnowledgeBaseStats() {\n    const allEntries = await storage.getAllFaqEntries();\n    const totalEntries = allEntries.length;\n    \n    // Calculate average usage and most used entries\n    const avgUsage = totalEntries > 0 \n      ? allEntries.reduce((sum, entry) => sum + (entry.usageCount || 0), 0) / totalEntries \n      : 0;\n    \n    return {\n      totalEntries,\n      lastUpdate: \"2 hours ago\", // In production, this would be dynamic\n      accuracy: \"96.8%\", // In production, this would be calculated from user feedback\n      avgUsage: Math.round(avgUsage),\n      categoriesCount: this.categories.length\n    };\n  }\n\n  async getFaqById(id: string) {\n    return await storage.getFaqEntryById(id);\n  }\n}\n\nexport const knowledgeBaseService = new KnowledgeBaseService();\n","size_bytes":2446},"server/services/rag.ts":{"content":"import { FaqEntry } from \"@shared/schema\";\n\nexport interface SimilarityResult {\n  entry: FaqEntry;\n  score: number;\n}\n\nexport class RAGService {\n  private readonly SIMILARITY_THRESHOLD = 0.3;\n\n  // Simplified text similarity using keyword matching and Jaccard similarity\n  private calculateSimilarity(query: string, entry: FaqEntry): number {\n    const queryWords = this.tokenize(query.toLowerCase());\n    const questionWords = this.tokenize(entry.question.toLowerCase());\n    const keywordWords = entry.keywords || [];\n    \n    // Combine question words and keywords for matching\n    const entryWords = [...questionWords, ...keywordWords];\n    \n    // Calculate Jaccard similarity\n    const intersection = queryWords.filter(word => entryWords.includes(word));\n    const union = Array.from(new Set([...queryWords, ...entryWords]));\n    \n    const jaccardScore = intersection.length / union.length;\n    \n    // Boost score if query contains exact phrases from question\n    const phraseBoost = this.calculatePhraseMatch(query.toLowerCase(), entry.question.toLowerCase());\n    \n    return Math.min(jaccardScore + phraseBoost, 1.0);\n  }\n\n  private tokenize(text: string): string[] {\n    return text\n      .replace(/[^\\w\\s]/g, ' ')\n      .split(/\\s+/)\n      .filter(word => word.length > 2)\n      .filter(word => !this.isStopWord(word));\n  }\n\n  private isStopWord(word: string): boolean {\n    const stopWords = ['the', 'is', 'at', 'which', 'on', 'and', 'a', 'to', 'are', 'as', 'was', 'were', 'been', 'be', 'have', 'has', 'had', 'do', 'does', 'did', 'will', 'would', 'should', 'could', 'can', 'may', 'might', 'must', 'shall', 'for', 'of', 'with', 'by'];\n    return stopWords.includes(word.toLowerCase());\n  }\n\n  private calculatePhraseMatch(query: string, question: string): number {\n    const queryPhrases = this.extractPhrases(query);\n    const questionPhrases = this.extractPhrases(question);\n    \n    let matches = 0;\n    queryPhrases.forEach(phrase => {\n      if (questionPhrases.some(qPhrase => qPhrase.includes(phrase) || phrase.includes(qPhrase))) {\n        matches++;\n      }\n    });\n    \n    return matches > 0 ? 0.2 : 0;\n  }\n\n  private extractPhrases(text: string): string[] {\n    const words = text.split(' ');\n    const phrases: string[] = [];\n    \n    // Extract 2-word and 3-word phrases\n    for (let i = 0; i < words.length - 1; i++) {\n      phrases.push(words.slice(i, i + 2).join(' '));\n      if (i < words.length - 2) {\n        phrases.push(words.slice(i, i + 3).join(' '));\n      }\n    }\n    \n    return phrases;\n  }\n\n  public async searchKnowledgeBase(query: string, entries: FaqEntry[]): Promise<SimilarityResult[]> {\n    const startTime = Date.now();\n    \n    const results: SimilarityResult[] = entries\n      .map(entry => ({\n        entry,\n        score: this.calculateSimilarity(query, entry)\n      }))\n      .filter(result => result.score >= this.SIMILARITY_THRESHOLD)\n      .sort((a, b) => b.score - a.score)\n      .slice(0, 3); // Return top 3 matches\n\n    const searchTime = Date.now() - startTime;\n    console.log(`RAG search completed in ${searchTime}ms, found ${results.length} matches`);\n    \n    return results;\n  }\n\n  public async getBestMatch(query: string, entries: FaqEntry[]): Promise<SimilarityResult | null> {\n    const results = await this.searchKnowledgeBase(query, entries);\n    return results.length > 0 ? results[0] : null;\n  }\n\n  public getTopMatches(query: string, entries: FaqEntry[], count: number = 3): Promise<SimilarityResult[]> {\n    return this.searchKnowledgeBase(query, entries).then(results => results.slice(0, count));\n  }\n}\n\nexport const ragService = new RAGService();\n","size_bytes":3624},"client/src/hooks/use-chat.ts":{"content":"import { useState, useCallback, useEffect } from 'react';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Message, ChatState, FAQCategory } from '@/types/chat';\nimport { ChatResponse } from '@shared/schema';\n// Use browser-compatible UUID generation\nfunction generateUUID(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\nexport function useChat() {\n  const queryClient = useQueryClient();\n  const [state, setState] = useState<ChatState>(() => ({\n    messages: [],\n    isLoading: false,\n    sessionId: `session_${generateUUID()}`,\n    rateLimitRemaining: 25,\n    isRateLimited: false\n  }));\n\n  // Initialize with welcome message\n  useEffect(() => {\n    setState(prev => ({\n      ...prev,\n      messages: [{\n        id: generateUUID(),\n        type: 'bot',\n        content: \"Welcome! I'm your AI customer support assistant. I have access to over 1,000 FAQ entries and can help you with orders, payments, returns, and more. Browse the categories on the left for instant answers, or type your question below for a personalized response.\",\n        timestamp: new Date(),\n        source: 'system'\n      }]\n    }));\n  }, []);\n\n  // Send chat message\n  const sendMessageMutation = useMutation({\n    mutationFn: async (message: string) => {\n      const response = await apiRequest('POST', '/api/chat/query', {\n        message,\n        sessionId: state.sessionId\n      });\n      return await response.json() as ChatResponse;\n    },\n    onMutate: (message: string) => {\n      // Add user message immediately\n      const userMessage: Message = {\n        id: generateUUID(),\n        type: 'user',\n        content: message,\n        timestamp: new Date()\n      };\n      \n      setState(prev => ({\n        ...prev,\n        messages: [...prev.messages, userMessage],\n        isLoading: true\n      }));\n    },\n    onSuccess: (response: ChatResponse) => {\n      const botMessage: Message = {\n        id: generateUUID(),\n        type: 'bot',\n        content: response.response,\n        timestamp: new Date(),\n        source: response.source,\n        responseTime: response.responseTime,\n        similarityScore: response.similarityScore,\n        kbEntryId: response.kbEntryId\n      };\n\n      setState(prev => ({\n        ...prev,\n        messages: [...prev.messages, botMessage],\n        isLoading: false,\n        rateLimitRemaining: response.rateLimitRemaining,\n        isRateLimited: response.rateLimitRemaining <= 0\n      }));\n    },\n    onError: (error) => {\n      const errorMessage: Message = {\n        id: generateUUID(),\n        type: 'system',\n        content: \"I'm sorry, I encountered an error processing your request. Please try again or contact customer support.\",\n        timestamp: new Date(),\n        source: 'system'\n      };\n\n      setState(prev => ({\n        ...prev,\n        messages: [...prev.messages, errorMessage],\n        isLoading: false\n      }));\n    }\n  });\n\n  // Select FAQ\n  const selectFAQMutation = useMutation({\n    mutationFn: async ({ questionId, question }: { questionId: string; question: string }) => {\n      // Add user message for the question\n      const userMessage: Message = {\n        id: generateUUID(),\n        type: 'user',\n        content: question,\n        timestamp: new Date()\n      };\n      \n      setState(prev => ({\n        ...prev,\n        messages: [...prev.messages, userMessage],\n        isLoading: true\n      }));\n\n      const response = await apiRequest('POST', '/api/faq/select', {\n        questionId,\n        category: '' // Not needed for selection\n      });\n      return await response.json() as ChatResponse;\n    },\n    onSuccess: (response: ChatResponse) => {\n      const botMessage: Message = {\n        id: generateUUID(),\n        type: 'bot',\n        content: response.response,\n        timestamp: new Date(),\n        source: response.source,\n        responseTime: response.responseTime,\n        kbEntryId: response.kbEntryId\n      };\n\n      setState(prev => ({\n        ...prev,\n        messages: [...prev.messages, botMessage],\n        isLoading: false\n      }));\n    },\n    onError: () => {\n      setState(prev => ({\n        ...prev,\n        isLoading: false\n      }));\n    }\n  });\n\n  const sendMessage = useCallback((message: string) => {\n    if (message.trim() && !state.isLoading && !state.isRateLimited) {\n      sendMessageMutation.mutate(message.trim());\n    }\n  }, [sendMessageMutation, state.isLoading, state.isRateLimited]);\n\n  const selectFAQ = useCallback((questionId: string, question: string) => {\n    if (!state.isLoading) {\n      selectFAQMutation.mutate({ questionId, question });\n    }\n  }, [selectFAQMutation, state.isLoading]);\n\n  const clearChat = useCallback(() => {\n    setState(prev => ({\n      ...prev,\n      messages: [{\n        id: generateUUID(),\n        type: 'bot',\n        content: \"Chat cleared. How can I help you today?\",\n        timestamp: new Date(),\n        source: 'system'\n      }]\n    }));\n  }, []);\n\n  return {\n    ...state,\n    sendMessage,\n    selectFAQ,\n    clearChat,\n    isProcessing: sendMessageMutation.isPending || selectFAQMutation.isPending\n  };\n}\n\nexport function useFAQCategories() {\n  return useQuery({\n    queryKey: ['/api/faq/categories'],\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n}\n\nexport function useKnowledgeBaseStats() {\n  return useQuery({\n    queryKey: ['/api/kb/stats'],\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n}\n","size_bytes":5592},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/chat.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { ChatHeader } from \"@/components/chat/ChatHeader\";\nimport { ChatMessages } from \"@/components/chat/ChatMessages\";\nimport { ChatInput } from \"@/components/chat/ChatInput\";\nimport { FAQSidebar } from \"@/components/chat/FAQSidebar\";\nimport { RAGProcessModal } from \"@/components/chat/RAGProcessModal\";\nimport { useChat } from \"@/hooks/use-chat\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Brain } from \"lucide-react\";\n\nexport default function ChatPage() {\n  const {\n    messages,\n    isLoading,\n    sessionId,\n    rateLimitRemaining,\n    isRateLimited,\n    sendMessage,\n    selectFAQ,\n    clearChat,\n    isProcessing\n  } = useChat();\n\n  const [showRAGModal, setShowRAGModal] = useState(false);\n  const [ragStep, setRAGStep] = useState<'searching' | 'similarity' | 'gemini' | 'complete'>('searching');\n  const chatInputRef = useRef<HTMLTextAreaElement>(null);\n\n  // Show RAG modal when processing\n  useEffect(() => {\n    if (isProcessing) {\n      setShowRAGModal(true);\n      setRAGStep('searching');\n      \n      // Simulate RAG process steps\n      const timer1 = setTimeout(() => setRAGStep('similarity'), 500);\n      const timer2 = setTimeout(() => setRAGStep('gemini'), 1000);\n      const timer3 = setTimeout(() => {\n        setRAGStep('complete');\n        setTimeout(() => setShowRAGModal(false), 500);\n      }, 2000);\n\n      return () => {\n        clearTimeout(timer1);\n        clearTimeout(timer2);\n        clearTimeout(timer3);\n      };\n    }\n  }, [isProcessing]);\n\n  const handleStartDirectChat = () => {\n    chatInputRef.current?.focus();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border px-6 py-4 sticky top-0 z-50\">\n        <div className=\"flex items-center justify-between max-w-7xl mx-auto\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"bg-primary text-primary-foreground p-2 rounded-lg\">\n              <Brain className=\"h-6 w-6\" />\n            </div>\n            <div>\n              <h1 className=\"text-xl font-semibold text-foreground\" data-testid=\"app-title\">\n                AI Customer Support\n              </h1>\n              <p className=\"text-sm text-muted-foreground\">\n                Powered by Gemini API & RAG System\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Badge variant=\"outline\" className=\"bg-green-100 text-green-800 border-green-200\">\n              <span className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></span>\n              Online\n            </Badge>\n            <div className=\"text-sm text-muted-foreground\" data-testid=\"header-rate-limit\">\n              <span className=\"font-medium\">{rateLimitRemaining}</span>/25 queries today\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"flex h-[calc(100vh-80px)]\">\n        {/* Sidebar */}\n        <FAQSidebar \n          onSelectFAQ={selectFAQ}\n          onStartDirectChat={handleStartDirectChat}\n        />\n\n        {/* Main Chat Area */}\n        <main className=\"flex-1 flex flex-col bg-background\">\n          <ChatHeader \n            onClearChat={clearChat}\n            rateLimitRemaining={rateLimitRemaining}\n          />\n          <ChatMessages \n            messages={messages}\n            isLoading={isLoading}\n          />\n          <ChatInput \n            onSendMessage={sendMessage}\n            isLoading={isLoading}\n            isRateLimited={isRateLimited}\n          />\n        </main>\n      </div>\n\n      {/* RAG Process Modal */}\n      <RAGProcessModal \n        isOpen={showRAGModal}\n        onClose={() => setShowRAGModal(false)}\n        currentStep={ragStep}\n        vectorsSearched={1247}\n        bestScore={0.89}\n      />\n    </div>\n  );\n}\n","size_bytes":3864},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/chat.ts":{"content":"export interface Message {\n  id: string;\n  type: 'user' | 'bot' | 'system';\n  content: string;\n  timestamp: Date;\n  source?: 'kb' | 'gemini' | 'instant' | 'system';\n  responseTime?: number;\n  similarityScore?: number;\n  kbEntryId?: string;\n}\n\nexport interface FAQCategory {\n  name: string;\n  icon: string;\n  count: number;\n  questions: Array<{\n    id: string;\n    question: string;\n    answer: string;\n  }>;\n}\n\nexport interface ChatState {\n  messages: Message[];\n  isLoading: boolean;\n  sessionId: string;\n  rateLimitRemaining: number;\n  isRateLimited: boolean;\n}\n\nexport interface KnowledgeBaseStats {\n  totalEntries: number;\n  lastUpdate: string;\n  accuracy: string;\n  avgUsage: number;\n  categoriesCount: number;\n}\n","size_bytes":718},"client/src/components/chat/ChatHeader.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Trash2, Brain, Database } from \"lucide-react\";\n\ninterface ChatHeaderProps {\n  onClearChat: () => void;\n  rateLimitRemaining: number;\n}\n\nexport function ChatHeader({ onClearChat, rateLimitRemaining }: ChatHeaderProps) {\n  return (\n    <div className=\"bg-card border-b border-border p-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"bg-primary/10 p-2 rounded-full\">\n            <Brain className=\"h-5 w-5 text-primary\" />\n          </div>\n          <div>\n            <h2 className=\"font-semibold\" data-testid=\"chat-title\">AI Customer Support Agent</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              <span className=\"inline-flex items-center\">\n                <span className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></span>\n                Online • Powered by Gemini API\n              </span>\n            </p>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <span className=\"text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full font-medium\">\n            RAG + AI Hybrid\n          </span>\n          <span className=\"text-sm text-muted-foreground\" data-testid=\"rate-limit-counter\">\n            {rateLimitRemaining}/25 queries today\n          </span>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={onClearChat}\n            data-testid=\"button-clear-chat\"\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1647},"client/src/components/chat/ChatInput.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Send, Database, Brain, Paperclip } from \"lucide-react\";\n\ninterface ChatInputProps {\n  onSendMessage: (message: string) => void;\n  isLoading: boolean;\n  isRateLimited: boolean;\n}\n\nexport function ChatInput({ onSendMessage, isLoading, isRateLimited }: ChatInputProps) {\n  const [message, setMessage] = useState(\"\");\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const handleSubmit = () => {\n    if (message.trim() && !isLoading && !isRateLimited) {\n      onSendMessage(message);\n      setMessage(\"\");\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit();\n    }\n  };\n\n  // Auto-resize textarea\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = 'auto';\n      textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';\n    }\n  }, [message]);\n\n  return (\n    <div className=\"border-t border-border p-4 bg-card\">\n      <div className=\"flex items-end space-x-3\">\n        <div className=\"flex-1\">\n          <div className=\"relative\">\n            <Textarea\n              ref={textareaRef}\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              onKeyDown={handleKeyDown}\n              placeholder={\n                isRateLimited \n                  ? \"Daily limit reached. Try again tomorrow.\"\n                  : \"Type your question here... (e.g., 'How do I return an item?')\"\n              }\n              className=\"resize-none pr-12 min-h-[60px]\"\n              disabled={isLoading || isRateLimited}\n              data-testid=\"input-chat-message\"\n            />\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"absolute bottom-3 right-3\"\n              disabled={isLoading || isRateLimited}\n              data-testid=\"button-attach-file\"\n            >\n              <Paperclip className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          <div className=\"flex items-center justify-between mt-2 text-xs text-muted-foreground\">\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"flex items-center\">\n                <Database className=\"h-3 w-3 mr-1\" />\n                RAG Search Enabled\n              </span>\n              <span className=\"flex items-center\">\n                <Brain className=\"h-3 w-3 mr-1\" />\n                Gemini Fallback Active\n              </span>\n            </div>\n            <span data-testid=\"text-char-count\">\n              {message.length}/500 characters\n            </span>\n          </div>\n        </div>\n        <Button \n          onClick={handleSubmit}\n          disabled={!message.trim() || isLoading || isRateLimited}\n          className=\"px-6 py-3\"\n          data-testid=\"button-send-message\"\n        >\n          <Send className=\"h-4 w-4 mr-2\" />\n          <span className=\"hidden sm:inline\">Send</span>\n        </Button>\n      </div>\n\n      {isRateLimited && (\n        <div className=\"mt-3 p-3 bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800 rounded-lg\">\n          <p className=\"text-sm text-amber-700 dark:text-amber-400\">\n            You've reached your daily query limit. Please try again tomorrow or contact customer care directly.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":3555},"client/src/components/chat/ChatMessages.tsx":{"content":"import { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Message } from \"@/types/chat\";\nimport { Brain, User, Database, Zap, AlertTriangle, Clock } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ChatMessagesProps {\n  messages: Message[];\n  isLoading: boolean;\n}\n\nexport function ChatMessages({ messages, isLoading }: ChatMessagesProps) {\n  const getSourceConfig = (source?: string) => {\n    switch (source) {\n      case 'kb':\n        return { \n          bg: 'bg-green-100 dark:bg-green-900/20', \n          text: 'text-green-800 dark:text-green-400', \n          icon: Database, \n          label: 'Knowledge Base' \n        };\n      case 'gemini':\n        return { \n          bg: 'bg-purple-100 dark:bg-purple-900/20', \n          text: 'text-purple-800 dark:text-purple-400', \n          icon: Brain, \n          label: 'Gemini AI' \n        };\n      case 'system':\n        return { \n          bg: 'bg-amber-100 dark:bg-amber-900/20', \n          text: 'text-amber-800 dark:text-amber-400', \n          icon: AlertTriangle, \n          label: 'System' \n        };\n      default:\n        return { \n          bg: 'bg-blue-100 dark:bg-blue-900/20', \n          text: 'text-blue-800 dark:text-blue-400', \n          icon: Zap, \n          label: 'Instant' \n        };\n    }\n  };\n\n  const formatTime = (timestamp: Date) => {\n    const now = new Date();\n    const diff = now.getTime() - timestamp.getTime();\n    \n    if (diff < 60000) return 'Just now';\n    if (diff < 3600000) return `${Math.floor(diff / 60000)}m ago`;\n    if (diff < 86400000) return `${Math.floor(diff / 3600000)}h ago`;\n    return timestamp.toLocaleDateString();\n  };\n\n  return (\n    <ScrollArea className=\"flex-1 p-6\">\n      <div className=\"space-y-4\" data-testid=\"chat-messages\">\n        {messages.map((message) => {\n          if (message.type === 'user') {\n            return (\n              <div key={message.id} className=\"flex items-start space-x-3 justify-end\">\n                <div className=\"bg-primary text-primary-foreground rounded-lg p-4 max-w-2xl\" data-testid={`message-user-${message.id}`}>\n                  <p className=\"text-sm\">{message.content}</p>\n                  <div className=\"mt-2 text-xs text-primary-foreground/80\">\n                    <Clock className=\"inline h-3 w-3 mr-1\" />\n                    {formatTime(message.timestamp)}\n                  </div>\n                </div>\n                <div className=\"bg-muted p-2 rounded-full flex-shrink-0\">\n                  <User className=\"h-4 w-4 text-muted-foreground\" />\n                </div>\n              </div>\n            );\n          }\n\n          const config = getSourceConfig(message.source);\n          const SourceIcon = config.icon;\n\n          return (\n            <div key={message.id} className=\"flex items-start space-x-3\">\n              <div className=\"bg-primary p-2 rounded-full flex-shrink-0\">\n                <Brain className=\"h-4 w-4 text-primary-foreground\" />\n              </div>\n              <div className=\"bg-card border border-border rounded-lg p-4 max-w-2xl\" data-testid={`message-bot-${message.id}`}>\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <span className=\"font-medium text-sm\">AI Support Agent</span>\n                  <span className={cn(\"text-xs px-2 py-0.5 rounded-full\", config.bg, config.text)}>\n                    <SourceIcon className=\"inline h-3 w-3 mr-1\" />\n                    {config.label}\n                  </span>\n                </div>\n                <p className=\"text-sm text-foreground whitespace-pre-wrap\">{message.content}</p>\n                \n                {(message.responseTime || message.similarityScore) && (\n                  <div className=\"mt-3 pt-3 border-t border-border\">\n                    <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                      <div className=\"flex items-center space-x-4\">\n                        {message.similarityScore && (\n                          <span>Match: {(message.similarityScore * 100).toFixed(1)}%</span>\n                        )}\n                        {message.kbEntryId && (\n                          <span>Source: FAQ #{message.kbEntryId.slice(-6)}</span>\n                        )}\n                      </div>\n                      {message.responseTime && (\n                        <span>Response time: {message.responseTime}ms</span>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          );\n        })}\n\n        {isLoading && (\n          <div className=\"flex items-start space-x-3\">\n            <div className=\"bg-primary p-2 rounded-full flex-shrink-0\">\n              <Brain className=\"h-4 w-4 text-primary-foreground animate-pulse\" />\n            </div>\n            <div className=\"bg-card border border-border rounded-lg p-4 max-w-2xl\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <span className=\"font-medium text-sm\">AI Support Agent</span>\n                <span className=\"text-xs bg-blue-100 dark:bg-blue-900/20 text-blue-800 dark:text-blue-400 px-2 py-0.5 rounded-full\">\n                  <Brain className=\"inline h-3 w-3 mr-1 animate-pulse\" />\n                  Processing...\n                </span>\n              </div>\n              <div className=\"space-y-2\">\n                <div className=\"h-4 bg-muted rounded animate-pulse\"></div>\n                <div className=\"h-4 bg-muted rounded animate-pulse w-3/4\"></div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </ScrollArea>\n  );\n}\n","size_bytes":5628},"client/src/components/chat/FAQSidebar.tsx":{"content":"import { useState } from \"react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Button } from \"@/components/ui/button\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ChevronDown, ChevronRight, MessageCircle, Database, Activity, Clock } from \"lucide-react\";\nimport { FAQCategory, KnowledgeBaseStats } from \"@/types/chat\";\nimport { useFAQCategories, useKnowledgeBaseStats } from \"@/hooks/use-chat\";\nimport { cn } from \"@/lib/utils\";\n\ninterface FAQSidebarProps {\n  onSelectFAQ: (questionId: string, question: string) => void;\n  onStartDirectChat: () => void;\n}\n\nexport function FAQSidebar({ onSelectFAQ, onStartDirectChat }: FAQSidebarProps) {\n  const [openCategories, setOpenCategories] = useState<string[]>(['Orders']);\n  const { data: categories, isLoading: categoriesLoading } = useFAQCategories();\n  const { data: stats, isLoading: statsLoading } = useKnowledgeBaseStats();\n\n  const toggleCategory = (categoryName: string) => {\n    setOpenCategories(prev => \n      prev.includes(categoryName)\n        ? prev.filter(name => name !== categoryName)\n        : [...prev, categoryName]\n    );\n  };\n\n  const getCategoryIcon = (iconClass: string) => {\n    // Map Font Awesome classes to Lucide icons\n    const iconMap: Record<string, any> = {\n      'fas fa-shopping-cart': '🛒',\n      'fas fa-credit-card': '💳',\n      'fas fa-undo': '↩️',\n      'fas fa-times-circle': '❌',\n      'fas fa-crown': '👑',\n      'fas fa-truck': '🚚',\n      'fas fa-shield-alt': '🛡️',\n      'fas fa-gift': '🎁',\n      'fas fa-user-shield': '🔐',\n      'fas fa-globe': '🌍'\n    };\n    \n    return iconMap[iconClass] || '📋';\n  };\n\n  return (\n    <aside className=\"w-80 bg-card border-r border-border\">\n      <ScrollArea className=\"h-[calc(100vh-80px)]\">\n        <div className=\"p-6\">\n          <div className=\"mb-6\">\n            <h2 className=\"text-lg font-semibold mb-2\" data-testid=\"sidebar-title\">Quick Help</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              Browse frequently asked questions or start a conversation below.\n            </p>\n          </div>\n\n          {/* FAQ Categories */}\n          <div className=\"space-y-3\" data-testid=\"faq-categories\">\n            {categoriesLoading ? (\n              Array.from({ length: 5 }).map((_, i) => (\n                <Skeleton key={i} className=\"h-16 w-full\" />\n              ))\n            ) : (\n              categories?.map((category) => {\n                const isOpen = openCategories.includes(category.name);\n                return (\n                  <Collapsible \n                    key={category.name} \n                    open={isOpen}\n                    onOpenChange={() => toggleCategory(category.name)}\n                  >\n                    <Card className=\"border border-border\">\n                      <CollapsibleTrigger asChild>\n                        <Button \n                          variant=\"ghost\" \n                          className=\"w-full p-4 justify-between hover:bg-secondary\"\n                          data-testid={`button-category-${category.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                        >\n                          <div className=\"flex items-center space-x-3\">\n                            <span className=\"text-lg\">{getCategoryIcon(category.icon)}</span>\n                            <span className=\"font-medium\">{category.name}</span>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              {category.count}\n                            </Badge>\n                            {isOpen ? (\n                              <ChevronDown className=\"h-4 w-4\" />\n                            ) : (\n                              <ChevronRight className=\"h-4 w-4\" />\n                            )}\n                          </div>\n                        </Button>\n                      </CollapsibleTrigger>\n                      <CollapsibleContent>\n                        <div className=\"px-4 pb-4 space-y-2\">\n                          {category.questions.map((question) => (\n                            <Button\n                              key={question.id}\n                              variant=\"ghost\"\n                              className=\"w-full text-left p-2 text-sm h-auto justify-start\"\n                              onClick={() => onSelectFAQ(question.id, question.question)}\n                              data-testid={`button-faq-${question.id}`}\n                            >\n                              {question.question}\n                            </Button>\n                          ))}\n                        </div>\n                      </CollapsibleContent>\n                    </Card>\n                  </Collapsible>\n                );\n              })\n            )}\n\n            {/* Direct Chat Option */}\n            <Card className=\"border-2 border-dashed border-primary/30\">\n              <CardContent className=\"p-0\">\n                <Button \n                  variant=\"ghost\" \n                  className=\"w-full p-4 justify-start hover:bg-primary/5\"\n                  onClick={onStartDirectChat}\n                  data-testid=\"button-start-direct-chat\"\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <MessageCircle className=\"h-5 w-5 text-primary\" />\n                    <div className=\"text-left\">\n                      <div className=\"font-medium text-primary\">Ask Something Else</div>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Start a conversation with our AI assistant\n                      </p>\n                    </div>\n                  </div>\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Knowledge Base Stats */}\n          <Card className=\"mt-6 bg-secondary\">\n            <CardContent className=\"p-4\">\n              <h3 className=\"font-medium text-sm mb-2 flex items-center\">\n                <Database className=\"h-4 w-4 mr-2\" />\n                Knowledge Base\n              </h3>\n              {statsLoading ? (\n                <div className=\"space-y-2\">\n                  <Skeleton className=\"h-4 w-full\" />\n                  <Skeleton className=\"h-4 w-3/4\" />\n                  <Skeleton className=\"h-4 w-1/2\" />\n                </div>\n              ) : (\n                <div className=\"space-y-2 text-xs text-muted-foreground\">\n                  <div className=\"flex justify-between\" data-testid=\"stat-total-entries\">\n                    <span>Total FAQs:</span>\n                    <span className=\"font-medium\">{stats?.totalEntries}</span>\n                  </div>\n                  <div className=\"flex justify-between\" data-testid=\"stat-last-update\">\n                    <span>Last Updated:</span>\n                    <span>{stats?.lastUpdate}</span>\n                  </div>\n                  <div className=\"flex justify-between\" data-testid=\"stat-accuracy\">\n                    <span>RAG Accuracy:</span>\n                    <span className=\"text-green-600 font-medium\">{stats?.accuracy}</span>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </ScrollArea>\n    </aside>\n  );\n}\n","size_bytes":7606},"client/src/components/chat/RAGProcessModal.tsx":{"content":"import { Dialog, DialogContent } from \"@/components/ui/dialog\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Brain, Database, Zap, Check, Clock } from \"lucide-react\";\n\ninterface RAGProcessModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  currentStep: 'searching' | 'similarity' | 'gemini' | 'complete';\n  vectorsSearched?: number;\n  bestScore?: number;\n}\n\nexport function RAGProcessModal({ \n  isOpen, \n  onClose, \n  currentStep, \n  vectorsSearched = 1000, \n  bestScore = 0.89 \n}: RAGProcessModalProps) {\n  const steps = [\n    { \n      key: 'searching', \n      label: 'Searching Knowledge Base...', \n      icon: Database,\n      complete: ['similarity', 'gemini', 'complete'].includes(currentStep)\n    },\n    { \n      key: 'similarity', \n      label: 'Calculating Similarity...', \n      icon: Zap,\n      complete: ['gemini', 'complete'].includes(currentStep),\n      active: currentStep === 'similarity'\n    },\n    { \n      key: 'gemini', \n      label: 'Consulting Gemini AI...', \n      icon: Brain,\n      complete: currentStep === 'complete',\n      active: currentStep === 'gemini'\n    }\n  ];\n\n  const getProgress = () => {\n    switch (currentStep) {\n      case 'searching': return 25;\n      case 'similarity': return 50;\n      case 'gemini': return 75;\n      case 'complete': return 100;\n      default: return 0;\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\" data-testid=\"rag-process-modal\">\n        <div className=\"text-center\">\n          <div className=\"bg-primary/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Brain className=\"text-primary text-2xl h-8 w-8 animate-pulse\" />\n          </div>\n          \n          <h3 className=\"font-semibold text-lg mb-4\" data-testid=\"modal-title\">\n            Processing Your Query\n          </h3>\n          \n          <Progress value={getProgress()} className=\"mb-4\" />\n          \n          <div className=\"space-y-3 text-sm mb-4\">\n            {steps.map((step) => {\n              const StepIcon = step.icon;\n              return (\n                <div key={step.key} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <StepIcon className=\"h-4 w-4\" />\n                    <span>{step.label}</span>\n                  </div>\n                  {step.complete ? (\n                    <Check className=\"h-4 w-4 text-green-500\" />\n                  ) : step.active ? (\n                    <div className=\"animate-spin h-4 w-4 border-2 border-primary border-t-transparent rounded-full\" />\n                  ) : (\n                    <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                  )}\n                </div>\n              );\n            })}\n          </div>\n          \n          <div className=\"bg-secondary rounded-lg p-3\">\n            <div className=\"text-xs text-muted-foreground space-y-1\">\n              <div className=\"flex justify-between\" data-testid=\"vectors-searched\">\n                <span>Vectors Searched:</span>\n                <span>{vectorsSearched.toLocaleString()}</span>\n              </div>\n              <div className=\"flex justify-between\" data-testid=\"best-match-score\">\n                <span>Best Match Score:</span>\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  {(bestScore * 100).toFixed(1)}%\n                </Badge>\n              </div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3608},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}